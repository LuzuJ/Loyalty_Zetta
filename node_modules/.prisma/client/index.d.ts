
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Qualification
 * 
 */
export type Qualification = $Result.DefaultSelection<Prisma.$QualificationPayload>
/**
 * Model QualityCalification
 * 
 */
export type QualityCalification = $Result.DefaultSelection<Prisma.$QualityCalificationPayload>
/**
 * Model TimeCalification
 * 
 */
export type TimeCalification = $Result.DefaultSelection<Prisma.$TimeCalificationPayload>
/**
 * Model PackagingCalification
 * 
 */
export type PackagingCalification = $Result.DefaultSelection<Prisma.$PackagingCalificationPayload>
/**
 * Model CommunicationCalification
 * 
 */
export type CommunicationCalification = $Result.DefaultSelection<Prisma.$CommunicationCalificationPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Qualifications
 * const qualifications = await prisma.qualification.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Qualifications
   * const qualifications = await prisma.qualification.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.qualification`: Exposes CRUD operations for the **Qualification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Qualifications
    * const qualifications = await prisma.qualification.findMany()
    * ```
    */
  get qualification(): Prisma.QualificationDelegate<ExtArgs>;

  /**
   * `prisma.qualityCalification`: Exposes CRUD operations for the **QualityCalification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more QualityCalifications
    * const qualityCalifications = await prisma.qualityCalification.findMany()
    * ```
    */
  get qualityCalification(): Prisma.QualityCalificationDelegate<ExtArgs>;

  /**
   * `prisma.timeCalification`: Exposes CRUD operations for the **TimeCalification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TimeCalifications
    * const timeCalifications = await prisma.timeCalification.findMany()
    * ```
    */
  get timeCalification(): Prisma.TimeCalificationDelegate<ExtArgs>;

  /**
   * `prisma.packagingCalification`: Exposes CRUD operations for the **PackagingCalification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PackagingCalifications
    * const packagingCalifications = await prisma.packagingCalification.findMany()
    * ```
    */
  get packagingCalification(): Prisma.PackagingCalificationDelegate<ExtArgs>;

  /**
   * `prisma.communicationCalification`: Exposes CRUD operations for the **CommunicationCalification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CommunicationCalifications
    * const communicationCalifications = await prisma.communicationCalification.findMany()
    * ```
    */
  get communicationCalification(): Prisma.CommunicationCalificationDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.18.0
   * Query Engine version: 4c784e32044a8a016d99474bd02a3b6123742169
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Qualification: 'Qualification',
    QualityCalification: 'QualityCalification',
    TimeCalification: 'TimeCalification',
    PackagingCalification: 'PackagingCalification',
    CommunicationCalification: 'CommunicationCalification'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "qualification" | "qualityCalification" | "timeCalification" | "packagingCalification" | "communicationCalification"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Qualification: {
        payload: Prisma.$QualificationPayload<ExtArgs>
        fields: Prisma.QualificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QualificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QualificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QualificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QualificationPayload>
          }
          findFirst: {
            args: Prisma.QualificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QualificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QualificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QualificationPayload>
          }
          findMany: {
            args: Prisma.QualificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QualificationPayload>[]
          }
          create: {
            args: Prisma.QualificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QualificationPayload>
          }
          createMany: {
            args: Prisma.QualificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QualificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QualificationPayload>[]
          }
          delete: {
            args: Prisma.QualificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QualificationPayload>
          }
          update: {
            args: Prisma.QualificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QualificationPayload>
          }
          deleteMany: {
            args: Prisma.QualificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QualificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.QualificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QualificationPayload>
          }
          aggregate: {
            args: Prisma.QualificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQualification>
          }
          groupBy: {
            args: Prisma.QualificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<QualificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.QualificationCountArgs<ExtArgs>
            result: $Utils.Optional<QualificationCountAggregateOutputType> | number
          }
        }
      }
      QualityCalification: {
        payload: Prisma.$QualityCalificationPayload<ExtArgs>
        fields: Prisma.QualityCalificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QualityCalificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QualityCalificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QualityCalificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QualityCalificationPayload>
          }
          findFirst: {
            args: Prisma.QualityCalificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QualityCalificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QualityCalificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QualityCalificationPayload>
          }
          findMany: {
            args: Prisma.QualityCalificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QualityCalificationPayload>[]
          }
          create: {
            args: Prisma.QualityCalificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QualityCalificationPayload>
          }
          createMany: {
            args: Prisma.QualityCalificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QualityCalificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QualityCalificationPayload>[]
          }
          delete: {
            args: Prisma.QualityCalificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QualityCalificationPayload>
          }
          update: {
            args: Prisma.QualityCalificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QualityCalificationPayload>
          }
          deleteMany: {
            args: Prisma.QualityCalificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QualityCalificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.QualityCalificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QualityCalificationPayload>
          }
          aggregate: {
            args: Prisma.QualityCalificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQualityCalification>
          }
          groupBy: {
            args: Prisma.QualityCalificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<QualityCalificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.QualityCalificationCountArgs<ExtArgs>
            result: $Utils.Optional<QualityCalificationCountAggregateOutputType> | number
          }
        }
      }
      TimeCalification: {
        payload: Prisma.$TimeCalificationPayload<ExtArgs>
        fields: Prisma.TimeCalificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TimeCalificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeCalificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TimeCalificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeCalificationPayload>
          }
          findFirst: {
            args: Prisma.TimeCalificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeCalificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TimeCalificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeCalificationPayload>
          }
          findMany: {
            args: Prisma.TimeCalificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeCalificationPayload>[]
          }
          create: {
            args: Prisma.TimeCalificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeCalificationPayload>
          }
          createMany: {
            args: Prisma.TimeCalificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TimeCalificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeCalificationPayload>[]
          }
          delete: {
            args: Prisma.TimeCalificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeCalificationPayload>
          }
          update: {
            args: Prisma.TimeCalificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeCalificationPayload>
          }
          deleteMany: {
            args: Prisma.TimeCalificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TimeCalificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TimeCalificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TimeCalificationPayload>
          }
          aggregate: {
            args: Prisma.TimeCalificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTimeCalification>
          }
          groupBy: {
            args: Prisma.TimeCalificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<TimeCalificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.TimeCalificationCountArgs<ExtArgs>
            result: $Utils.Optional<TimeCalificationCountAggregateOutputType> | number
          }
        }
      }
      PackagingCalification: {
        payload: Prisma.$PackagingCalificationPayload<ExtArgs>
        fields: Prisma.PackagingCalificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PackagingCalificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagingCalificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PackagingCalificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagingCalificationPayload>
          }
          findFirst: {
            args: Prisma.PackagingCalificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagingCalificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PackagingCalificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagingCalificationPayload>
          }
          findMany: {
            args: Prisma.PackagingCalificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagingCalificationPayload>[]
          }
          create: {
            args: Prisma.PackagingCalificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagingCalificationPayload>
          }
          createMany: {
            args: Prisma.PackagingCalificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PackagingCalificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagingCalificationPayload>[]
          }
          delete: {
            args: Prisma.PackagingCalificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagingCalificationPayload>
          }
          update: {
            args: Prisma.PackagingCalificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagingCalificationPayload>
          }
          deleteMany: {
            args: Prisma.PackagingCalificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PackagingCalificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PackagingCalificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagingCalificationPayload>
          }
          aggregate: {
            args: Prisma.PackagingCalificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePackagingCalification>
          }
          groupBy: {
            args: Prisma.PackagingCalificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<PackagingCalificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.PackagingCalificationCountArgs<ExtArgs>
            result: $Utils.Optional<PackagingCalificationCountAggregateOutputType> | number
          }
        }
      }
      CommunicationCalification: {
        payload: Prisma.$CommunicationCalificationPayload<ExtArgs>
        fields: Prisma.CommunicationCalificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommunicationCalificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunicationCalificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommunicationCalificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunicationCalificationPayload>
          }
          findFirst: {
            args: Prisma.CommunicationCalificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunicationCalificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommunicationCalificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunicationCalificationPayload>
          }
          findMany: {
            args: Prisma.CommunicationCalificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunicationCalificationPayload>[]
          }
          create: {
            args: Prisma.CommunicationCalificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunicationCalificationPayload>
          }
          createMany: {
            args: Prisma.CommunicationCalificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CommunicationCalificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunicationCalificationPayload>[]
          }
          delete: {
            args: Prisma.CommunicationCalificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunicationCalificationPayload>
          }
          update: {
            args: Prisma.CommunicationCalificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunicationCalificationPayload>
          }
          deleteMany: {
            args: Prisma.CommunicationCalificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommunicationCalificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CommunicationCalificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommunicationCalificationPayload>
          }
          aggregate: {
            args: Prisma.CommunicationCalificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCommunicationCalification>
          }
          groupBy: {
            args: Prisma.CommunicationCalificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommunicationCalificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommunicationCalificationCountArgs<ExtArgs>
            result: $Utils.Optional<CommunicationCalificationCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model Qualification
   */

  export type AggregateQualification = {
    _count: QualificationCountAggregateOutputType | null
    _avg: QualificationAvgAggregateOutputType | null
    _sum: QualificationSumAggregateOutputType | null
    _min: QualificationMinAggregateOutputType | null
    _max: QualificationMaxAggregateOutputType | null
  }

  export type QualificationAvgAggregateOutputType = {
    id: number | null
    qualityCalificationId: number | null
    timeCalificationId: number | null
    packagingCalificationId: number | null
    communicationCalificationId: number | null
    generalScore: number | null
  }

  export type QualificationSumAggregateOutputType = {
    id: number | null
    qualityCalificationId: number | null
    timeCalificationId: number | null
    packagingCalificationId: number | null
    communicationCalificationId: number | null
    generalScore: number | null
  }

  export type QualificationMinAggregateOutputType = {
    id: number | null
    donationId: string | null
    donatorId: string | null
    organizationId: string | null
    qualityCalificationId: number | null
    timeCalificationId: number | null
    packagingCalificationId: number | null
    communicationCalificationId: number | null
    generalScore: number | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type QualificationMaxAggregateOutputType = {
    id: number | null
    donationId: string | null
    donatorId: string | null
    organizationId: string | null
    qualityCalificationId: number | null
    timeCalificationId: number | null
    packagingCalificationId: number | null
    communicationCalificationId: number | null
    generalScore: number | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type QualificationCountAggregateOutputType = {
    id: number
    donationId: number
    donatorId: number
    organizationId: number
    qualityCalificationId: number
    timeCalificationId: number
    packagingCalificationId: number
    communicationCalificationId: number
    generalScore: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type QualificationAvgAggregateInputType = {
    id?: true
    qualityCalificationId?: true
    timeCalificationId?: true
    packagingCalificationId?: true
    communicationCalificationId?: true
    generalScore?: true
  }

  export type QualificationSumAggregateInputType = {
    id?: true
    qualityCalificationId?: true
    timeCalificationId?: true
    packagingCalificationId?: true
    communicationCalificationId?: true
    generalScore?: true
  }

  export type QualificationMinAggregateInputType = {
    id?: true
    donationId?: true
    donatorId?: true
    organizationId?: true
    qualityCalificationId?: true
    timeCalificationId?: true
    packagingCalificationId?: true
    communicationCalificationId?: true
    generalScore?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type QualificationMaxAggregateInputType = {
    id?: true
    donationId?: true
    donatorId?: true
    organizationId?: true
    qualityCalificationId?: true
    timeCalificationId?: true
    packagingCalificationId?: true
    communicationCalificationId?: true
    generalScore?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type QualificationCountAggregateInputType = {
    id?: true
    donationId?: true
    donatorId?: true
    organizationId?: true
    qualityCalificationId?: true
    timeCalificationId?: true
    packagingCalificationId?: true
    communicationCalificationId?: true
    generalScore?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type QualificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Qualification to aggregate.
     */
    where?: QualificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Qualifications to fetch.
     */
    orderBy?: QualificationOrderByWithRelationInput | QualificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QualificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Qualifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Qualifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Qualifications
    **/
    _count?: true | QualificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QualificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QualificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QualificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QualificationMaxAggregateInputType
  }

  export type GetQualificationAggregateType<T extends QualificationAggregateArgs> = {
        [P in keyof T & keyof AggregateQualification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQualification[P]>
      : GetScalarType<T[P], AggregateQualification[P]>
  }




  export type QualificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QualificationWhereInput
    orderBy?: QualificationOrderByWithAggregationInput | QualificationOrderByWithAggregationInput[]
    by: QualificationScalarFieldEnum[] | QualificationScalarFieldEnum
    having?: QualificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QualificationCountAggregateInputType | true
    _avg?: QualificationAvgAggregateInputType
    _sum?: QualificationSumAggregateInputType
    _min?: QualificationMinAggregateInputType
    _max?: QualificationMaxAggregateInputType
  }

  export type QualificationGroupByOutputType = {
    id: number
    donationId: string
    donatorId: string
    organizationId: string
    qualityCalificationId: number
    timeCalificationId: number
    packagingCalificationId: number
    communicationCalificationId: number
    generalScore: number
    notes: string
    createdAt: Date
    updatedAt: Date
    _count: QualificationCountAggregateOutputType | null
    _avg: QualificationAvgAggregateOutputType | null
    _sum: QualificationSumAggregateOutputType | null
    _min: QualificationMinAggregateOutputType | null
    _max: QualificationMaxAggregateOutputType | null
  }

  type GetQualificationGroupByPayload<T extends QualificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QualificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QualificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QualificationGroupByOutputType[P]>
            : GetScalarType<T[P], QualificationGroupByOutputType[P]>
        }
      >
    >


  export type QualificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    donationId?: boolean
    donatorId?: boolean
    organizationId?: boolean
    qualityCalificationId?: boolean
    timeCalificationId?: boolean
    packagingCalificationId?: boolean
    communicationCalificationId?: boolean
    generalScore?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    qualityCalification?: boolean | Qualification$qualityCalificationArgs<ExtArgs>
    timeCalification?: boolean | Qualification$timeCalificationArgs<ExtArgs>
    packagingCalification?: boolean | Qualification$packagingCalificationArgs<ExtArgs>
    communicationCalification?: boolean | Qualification$communicationCalificationArgs<ExtArgs>
  }, ExtArgs["result"]["qualification"]>

  export type QualificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    donationId?: boolean
    donatorId?: boolean
    organizationId?: boolean
    qualityCalificationId?: boolean
    timeCalificationId?: boolean
    packagingCalificationId?: boolean
    communicationCalificationId?: boolean
    generalScore?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    qualityCalification?: boolean | Qualification$qualityCalificationArgs<ExtArgs>
    timeCalification?: boolean | Qualification$timeCalificationArgs<ExtArgs>
    packagingCalification?: boolean | Qualification$packagingCalificationArgs<ExtArgs>
    communicationCalification?: boolean | Qualification$communicationCalificationArgs<ExtArgs>
  }, ExtArgs["result"]["qualification"]>

  export type QualificationSelectScalar = {
    id?: boolean
    donationId?: boolean
    donatorId?: boolean
    organizationId?: boolean
    qualityCalificationId?: boolean
    timeCalificationId?: boolean
    packagingCalificationId?: boolean
    communicationCalificationId?: boolean
    generalScore?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type QualificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    qualityCalification?: boolean | Qualification$qualityCalificationArgs<ExtArgs>
    timeCalification?: boolean | Qualification$timeCalificationArgs<ExtArgs>
    packagingCalification?: boolean | Qualification$packagingCalificationArgs<ExtArgs>
    communicationCalification?: boolean | Qualification$communicationCalificationArgs<ExtArgs>
  }
  export type QualificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    qualityCalification?: boolean | Qualification$qualityCalificationArgs<ExtArgs>
    timeCalification?: boolean | Qualification$timeCalificationArgs<ExtArgs>
    packagingCalification?: boolean | Qualification$packagingCalificationArgs<ExtArgs>
    communicationCalification?: boolean | Qualification$communicationCalificationArgs<ExtArgs>
  }

  export type $QualificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Qualification"
    objects: {
      qualityCalification: Prisma.$QualityCalificationPayload<ExtArgs> | null
      timeCalification: Prisma.$TimeCalificationPayload<ExtArgs> | null
      packagingCalification: Prisma.$PackagingCalificationPayload<ExtArgs> | null
      communicationCalification: Prisma.$CommunicationCalificationPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      donationId: string
      donatorId: string
      organizationId: string
      qualityCalificationId: number
      timeCalificationId: number
      packagingCalificationId: number
      communicationCalificationId: number
      generalScore: number
      notes: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["qualification"]>
    composites: {}
  }

  type QualificationGetPayload<S extends boolean | null | undefined | QualificationDefaultArgs> = $Result.GetResult<Prisma.$QualificationPayload, S>

  type QualificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<QualificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: QualificationCountAggregateInputType | true
    }

  export interface QualificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Qualification'], meta: { name: 'Qualification' } }
    /**
     * Find zero or one Qualification that matches the filter.
     * @param {QualificationFindUniqueArgs} args - Arguments to find a Qualification
     * @example
     * // Get one Qualification
     * const qualification = await prisma.qualification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QualificationFindUniqueArgs>(args: SelectSubset<T, QualificationFindUniqueArgs<ExtArgs>>): Prisma__QualificationClient<$Result.GetResult<Prisma.$QualificationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Qualification that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {QualificationFindUniqueOrThrowArgs} args - Arguments to find a Qualification
     * @example
     * // Get one Qualification
     * const qualification = await prisma.qualification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QualificationFindUniqueOrThrowArgs>(args: SelectSubset<T, QualificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QualificationClient<$Result.GetResult<Prisma.$QualificationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Qualification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QualificationFindFirstArgs} args - Arguments to find a Qualification
     * @example
     * // Get one Qualification
     * const qualification = await prisma.qualification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QualificationFindFirstArgs>(args?: SelectSubset<T, QualificationFindFirstArgs<ExtArgs>>): Prisma__QualificationClient<$Result.GetResult<Prisma.$QualificationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Qualification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QualificationFindFirstOrThrowArgs} args - Arguments to find a Qualification
     * @example
     * // Get one Qualification
     * const qualification = await prisma.qualification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QualificationFindFirstOrThrowArgs>(args?: SelectSubset<T, QualificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__QualificationClient<$Result.GetResult<Prisma.$QualificationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Qualifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QualificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Qualifications
     * const qualifications = await prisma.qualification.findMany()
     * 
     * // Get first 10 Qualifications
     * const qualifications = await prisma.qualification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const qualificationWithIdOnly = await prisma.qualification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QualificationFindManyArgs>(args?: SelectSubset<T, QualificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QualificationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Qualification.
     * @param {QualificationCreateArgs} args - Arguments to create a Qualification.
     * @example
     * // Create one Qualification
     * const Qualification = await prisma.qualification.create({
     *   data: {
     *     // ... data to create a Qualification
     *   }
     * })
     * 
     */
    create<T extends QualificationCreateArgs>(args: SelectSubset<T, QualificationCreateArgs<ExtArgs>>): Prisma__QualificationClient<$Result.GetResult<Prisma.$QualificationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Qualifications.
     * @param {QualificationCreateManyArgs} args - Arguments to create many Qualifications.
     * @example
     * // Create many Qualifications
     * const qualification = await prisma.qualification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QualificationCreateManyArgs>(args?: SelectSubset<T, QualificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Qualifications and returns the data saved in the database.
     * @param {QualificationCreateManyAndReturnArgs} args - Arguments to create many Qualifications.
     * @example
     * // Create many Qualifications
     * const qualification = await prisma.qualification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Qualifications and only return the `id`
     * const qualificationWithIdOnly = await prisma.qualification.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QualificationCreateManyAndReturnArgs>(args?: SelectSubset<T, QualificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QualificationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Qualification.
     * @param {QualificationDeleteArgs} args - Arguments to delete one Qualification.
     * @example
     * // Delete one Qualification
     * const Qualification = await prisma.qualification.delete({
     *   where: {
     *     // ... filter to delete one Qualification
     *   }
     * })
     * 
     */
    delete<T extends QualificationDeleteArgs>(args: SelectSubset<T, QualificationDeleteArgs<ExtArgs>>): Prisma__QualificationClient<$Result.GetResult<Prisma.$QualificationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Qualification.
     * @param {QualificationUpdateArgs} args - Arguments to update one Qualification.
     * @example
     * // Update one Qualification
     * const qualification = await prisma.qualification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QualificationUpdateArgs>(args: SelectSubset<T, QualificationUpdateArgs<ExtArgs>>): Prisma__QualificationClient<$Result.GetResult<Prisma.$QualificationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Qualifications.
     * @param {QualificationDeleteManyArgs} args - Arguments to filter Qualifications to delete.
     * @example
     * // Delete a few Qualifications
     * const { count } = await prisma.qualification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QualificationDeleteManyArgs>(args?: SelectSubset<T, QualificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Qualifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QualificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Qualifications
     * const qualification = await prisma.qualification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QualificationUpdateManyArgs>(args: SelectSubset<T, QualificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Qualification.
     * @param {QualificationUpsertArgs} args - Arguments to update or create a Qualification.
     * @example
     * // Update or create a Qualification
     * const qualification = await prisma.qualification.upsert({
     *   create: {
     *     // ... data to create a Qualification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Qualification we want to update
     *   }
     * })
     */
    upsert<T extends QualificationUpsertArgs>(args: SelectSubset<T, QualificationUpsertArgs<ExtArgs>>): Prisma__QualificationClient<$Result.GetResult<Prisma.$QualificationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Qualifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QualificationCountArgs} args - Arguments to filter Qualifications to count.
     * @example
     * // Count the number of Qualifications
     * const count = await prisma.qualification.count({
     *   where: {
     *     // ... the filter for the Qualifications we want to count
     *   }
     * })
    **/
    count<T extends QualificationCountArgs>(
      args?: Subset<T, QualificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QualificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Qualification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QualificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QualificationAggregateArgs>(args: Subset<T, QualificationAggregateArgs>): Prisma.PrismaPromise<GetQualificationAggregateType<T>>

    /**
     * Group by Qualification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QualificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QualificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QualificationGroupByArgs['orderBy'] }
        : { orderBy?: QualificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QualificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQualificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Qualification model
   */
  readonly fields: QualificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Qualification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QualificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    qualityCalification<T extends Qualification$qualityCalificationArgs<ExtArgs> = {}>(args?: Subset<T, Qualification$qualityCalificationArgs<ExtArgs>>): Prisma__QualityCalificationClient<$Result.GetResult<Prisma.$QualityCalificationPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    timeCalification<T extends Qualification$timeCalificationArgs<ExtArgs> = {}>(args?: Subset<T, Qualification$timeCalificationArgs<ExtArgs>>): Prisma__TimeCalificationClient<$Result.GetResult<Prisma.$TimeCalificationPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    packagingCalification<T extends Qualification$packagingCalificationArgs<ExtArgs> = {}>(args?: Subset<T, Qualification$packagingCalificationArgs<ExtArgs>>): Prisma__PackagingCalificationClient<$Result.GetResult<Prisma.$PackagingCalificationPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    communicationCalification<T extends Qualification$communicationCalificationArgs<ExtArgs> = {}>(args?: Subset<T, Qualification$communicationCalificationArgs<ExtArgs>>): Prisma__CommunicationCalificationClient<$Result.GetResult<Prisma.$CommunicationCalificationPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Qualification model
   */ 
  interface QualificationFieldRefs {
    readonly id: FieldRef<"Qualification", 'Int'>
    readonly donationId: FieldRef<"Qualification", 'String'>
    readonly donatorId: FieldRef<"Qualification", 'String'>
    readonly organizationId: FieldRef<"Qualification", 'String'>
    readonly qualityCalificationId: FieldRef<"Qualification", 'Int'>
    readonly timeCalificationId: FieldRef<"Qualification", 'Int'>
    readonly packagingCalificationId: FieldRef<"Qualification", 'Int'>
    readonly communicationCalificationId: FieldRef<"Qualification", 'Int'>
    readonly generalScore: FieldRef<"Qualification", 'Float'>
    readonly notes: FieldRef<"Qualification", 'String'>
    readonly createdAt: FieldRef<"Qualification", 'DateTime'>
    readonly updatedAt: FieldRef<"Qualification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Qualification findUnique
   */
  export type QualificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Qualification
     */
    select?: QualificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QualificationInclude<ExtArgs> | null
    /**
     * Filter, which Qualification to fetch.
     */
    where: QualificationWhereUniqueInput
  }

  /**
   * Qualification findUniqueOrThrow
   */
  export type QualificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Qualification
     */
    select?: QualificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QualificationInclude<ExtArgs> | null
    /**
     * Filter, which Qualification to fetch.
     */
    where: QualificationWhereUniqueInput
  }

  /**
   * Qualification findFirst
   */
  export type QualificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Qualification
     */
    select?: QualificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QualificationInclude<ExtArgs> | null
    /**
     * Filter, which Qualification to fetch.
     */
    where?: QualificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Qualifications to fetch.
     */
    orderBy?: QualificationOrderByWithRelationInput | QualificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Qualifications.
     */
    cursor?: QualificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Qualifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Qualifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Qualifications.
     */
    distinct?: QualificationScalarFieldEnum | QualificationScalarFieldEnum[]
  }

  /**
   * Qualification findFirstOrThrow
   */
  export type QualificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Qualification
     */
    select?: QualificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QualificationInclude<ExtArgs> | null
    /**
     * Filter, which Qualification to fetch.
     */
    where?: QualificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Qualifications to fetch.
     */
    orderBy?: QualificationOrderByWithRelationInput | QualificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Qualifications.
     */
    cursor?: QualificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Qualifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Qualifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Qualifications.
     */
    distinct?: QualificationScalarFieldEnum | QualificationScalarFieldEnum[]
  }

  /**
   * Qualification findMany
   */
  export type QualificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Qualification
     */
    select?: QualificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QualificationInclude<ExtArgs> | null
    /**
     * Filter, which Qualifications to fetch.
     */
    where?: QualificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Qualifications to fetch.
     */
    orderBy?: QualificationOrderByWithRelationInput | QualificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Qualifications.
     */
    cursor?: QualificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Qualifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Qualifications.
     */
    skip?: number
    distinct?: QualificationScalarFieldEnum | QualificationScalarFieldEnum[]
  }

  /**
   * Qualification create
   */
  export type QualificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Qualification
     */
    select?: QualificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QualificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Qualification.
     */
    data: XOR<QualificationCreateInput, QualificationUncheckedCreateInput>
  }

  /**
   * Qualification createMany
   */
  export type QualificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Qualifications.
     */
    data: QualificationCreateManyInput | QualificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Qualification createManyAndReturn
   */
  export type QualificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Qualification
     */
    select?: QualificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Qualifications.
     */
    data: QualificationCreateManyInput | QualificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QualificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Qualification update
   */
  export type QualificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Qualification
     */
    select?: QualificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QualificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Qualification.
     */
    data: XOR<QualificationUpdateInput, QualificationUncheckedUpdateInput>
    /**
     * Choose, which Qualification to update.
     */
    where: QualificationWhereUniqueInput
  }

  /**
   * Qualification updateMany
   */
  export type QualificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Qualifications.
     */
    data: XOR<QualificationUpdateManyMutationInput, QualificationUncheckedUpdateManyInput>
    /**
     * Filter which Qualifications to update
     */
    where?: QualificationWhereInput
  }

  /**
   * Qualification upsert
   */
  export type QualificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Qualification
     */
    select?: QualificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QualificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Qualification to update in case it exists.
     */
    where: QualificationWhereUniqueInput
    /**
     * In case the Qualification found by the `where` argument doesn't exist, create a new Qualification with this data.
     */
    create: XOR<QualificationCreateInput, QualificationUncheckedCreateInput>
    /**
     * In case the Qualification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QualificationUpdateInput, QualificationUncheckedUpdateInput>
  }

  /**
   * Qualification delete
   */
  export type QualificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Qualification
     */
    select?: QualificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QualificationInclude<ExtArgs> | null
    /**
     * Filter which Qualification to delete.
     */
    where: QualificationWhereUniqueInput
  }

  /**
   * Qualification deleteMany
   */
  export type QualificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Qualifications to delete
     */
    where?: QualificationWhereInput
  }

  /**
   * Qualification.qualityCalification
   */
  export type Qualification$qualityCalificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QualityCalification
     */
    select?: QualityCalificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QualityCalificationInclude<ExtArgs> | null
    where?: QualityCalificationWhereInput
  }

  /**
   * Qualification.timeCalification
   */
  export type Qualification$timeCalificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeCalification
     */
    select?: TimeCalificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeCalificationInclude<ExtArgs> | null
    where?: TimeCalificationWhereInput
  }

  /**
   * Qualification.packagingCalification
   */
  export type Qualification$packagingCalificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackagingCalification
     */
    select?: PackagingCalificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackagingCalificationInclude<ExtArgs> | null
    where?: PackagingCalificationWhereInput
  }

  /**
   * Qualification.communicationCalification
   */
  export type Qualification$communicationCalificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunicationCalification
     */
    select?: CommunicationCalificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunicationCalificationInclude<ExtArgs> | null
    where?: CommunicationCalificationWhereInput
  }

  /**
   * Qualification without action
   */
  export type QualificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Qualification
     */
    select?: QualificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QualificationInclude<ExtArgs> | null
  }


  /**
   * Model QualityCalification
   */

  export type AggregateQualityCalification = {
    _count: QualityCalificationCountAggregateOutputType | null
    _avg: QualityCalificationAvgAggregateOutputType | null
    _sum: QualityCalificationSumAggregateOutputType | null
    _min: QualityCalificationMinAggregateOutputType | null
    _max: QualityCalificationMaxAggregateOutputType | null
  }

  export type QualityCalificationAvgAggregateOutputType = {
    id: number | null
    score: number | null
  }

  export type QualityCalificationSumAggregateOutputType = {
    id: number | null
    score: number | null
  }

  export type QualityCalificationMinAggregateOutputType = {
    id: number | null
    score: number | null
    comments: string | null
  }

  export type QualityCalificationMaxAggregateOutputType = {
    id: number | null
    score: number | null
    comments: string | null
  }

  export type QualityCalificationCountAggregateOutputType = {
    id: number
    score: number
    comments: number
    _all: number
  }


  export type QualityCalificationAvgAggregateInputType = {
    id?: true
    score?: true
  }

  export type QualityCalificationSumAggregateInputType = {
    id?: true
    score?: true
  }

  export type QualityCalificationMinAggregateInputType = {
    id?: true
    score?: true
    comments?: true
  }

  export type QualityCalificationMaxAggregateInputType = {
    id?: true
    score?: true
    comments?: true
  }

  export type QualityCalificationCountAggregateInputType = {
    id?: true
    score?: true
    comments?: true
    _all?: true
  }

  export type QualityCalificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QualityCalification to aggregate.
     */
    where?: QualityCalificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QualityCalifications to fetch.
     */
    orderBy?: QualityCalificationOrderByWithRelationInput | QualityCalificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QualityCalificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QualityCalifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QualityCalifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned QualityCalifications
    **/
    _count?: true | QualityCalificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QualityCalificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QualityCalificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QualityCalificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QualityCalificationMaxAggregateInputType
  }

  export type GetQualityCalificationAggregateType<T extends QualityCalificationAggregateArgs> = {
        [P in keyof T & keyof AggregateQualityCalification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQualityCalification[P]>
      : GetScalarType<T[P], AggregateQualityCalification[P]>
  }




  export type QualityCalificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QualityCalificationWhereInput
    orderBy?: QualityCalificationOrderByWithAggregationInput | QualityCalificationOrderByWithAggregationInput[]
    by: QualityCalificationScalarFieldEnum[] | QualityCalificationScalarFieldEnum
    having?: QualityCalificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QualityCalificationCountAggregateInputType | true
    _avg?: QualityCalificationAvgAggregateInputType
    _sum?: QualityCalificationSumAggregateInputType
    _min?: QualityCalificationMinAggregateInputType
    _max?: QualityCalificationMaxAggregateInputType
  }

  export type QualityCalificationGroupByOutputType = {
    id: number
    score: number
    comments: string
    _count: QualityCalificationCountAggregateOutputType | null
    _avg: QualityCalificationAvgAggregateOutputType | null
    _sum: QualityCalificationSumAggregateOutputType | null
    _min: QualityCalificationMinAggregateOutputType | null
    _max: QualityCalificationMaxAggregateOutputType | null
  }

  type GetQualityCalificationGroupByPayload<T extends QualityCalificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QualityCalificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QualityCalificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QualityCalificationGroupByOutputType[P]>
            : GetScalarType<T[P], QualityCalificationGroupByOutputType[P]>
        }
      >
    >


  export type QualityCalificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    score?: boolean
    comments?: boolean
    qualification?: boolean | QualityCalification$qualificationArgs<ExtArgs>
  }, ExtArgs["result"]["qualityCalification"]>

  export type QualityCalificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    score?: boolean
    comments?: boolean
  }, ExtArgs["result"]["qualityCalification"]>

  export type QualityCalificationSelectScalar = {
    id?: boolean
    score?: boolean
    comments?: boolean
  }

  export type QualityCalificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    qualification?: boolean | QualityCalification$qualificationArgs<ExtArgs>
  }
  export type QualityCalificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $QualityCalificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "QualityCalification"
    objects: {
      qualification: Prisma.$QualificationPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      score: number
      comments: string
    }, ExtArgs["result"]["qualityCalification"]>
    composites: {}
  }

  type QualityCalificationGetPayload<S extends boolean | null | undefined | QualityCalificationDefaultArgs> = $Result.GetResult<Prisma.$QualityCalificationPayload, S>

  type QualityCalificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<QualityCalificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: QualityCalificationCountAggregateInputType | true
    }

  export interface QualityCalificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['QualityCalification'], meta: { name: 'QualityCalification' } }
    /**
     * Find zero or one QualityCalification that matches the filter.
     * @param {QualityCalificationFindUniqueArgs} args - Arguments to find a QualityCalification
     * @example
     * // Get one QualityCalification
     * const qualityCalification = await prisma.qualityCalification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QualityCalificationFindUniqueArgs>(args: SelectSubset<T, QualityCalificationFindUniqueArgs<ExtArgs>>): Prisma__QualityCalificationClient<$Result.GetResult<Prisma.$QualityCalificationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one QualityCalification that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {QualityCalificationFindUniqueOrThrowArgs} args - Arguments to find a QualityCalification
     * @example
     * // Get one QualityCalification
     * const qualityCalification = await prisma.qualityCalification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QualityCalificationFindUniqueOrThrowArgs>(args: SelectSubset<T, QualityCalificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QualityCalificationClient<$Result.GetResult<Prisma.$QualityCalificationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first QualityCalification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QualityCalificationFindFirstArgs} args - Arguments to find a QualityCalification
     * @example
     * // Get one QualityCalification
     * const qualityCalification = await prisma.qualityCalification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QualityCalificationFindFirstArgs>(args?: SelectSubset<T, QualityCalificationFindFirstArgs<ExtArgs>>): Prisma__QualityCalificationClient<$Result.GetResult<Prisma.$QualityCalificationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first QualityCalification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QualityCalificationFindFirstOrThrowArgs} args - Arguments to find a QualityCalification
     * @example
     * // Get one QualityCalification
     * const qualityCalification = await prisma.qualityCalification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QualityCalificationFindFirstOrThrowArgs>(args?: SelectSubset<T, QualityCalificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__QualityCalificationClient<$Result.GetResult<Prisma.$QualityCalificationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more QualityCalifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QualityCalificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all QualityCalifications
     * const qualityCalifications = await prisma.qualityCalification.findMany()
     * 
     * // Get first 10 QualityCalifications
     * const qualityCalifications = await prisma.qualityCalification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const qualityCalificationWithIdOnly = await prisma.qualityCalification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QualityCalificationFindManyArgs>(args?: SelectSubset<T, QualityCalificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QualityCalificationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a QualityCalification.
     * @param {QualityCalificationCreateArgs} args - Arguments to create a QualityCalification.
     * @example
     * // Create one QualityCalification
     * const QualityCalification = await prisma.qualityCalification.create({
     *   data: {
     *     // ... data to create a QualityCalification
     *   }
     * })
     * 
     */
    create<T extends QualityCalificationCreateArgs>(args: SelectSubset<T, QualityCalificationCreateArgs<ExtArgs>>): Prisma__QualityCalificationClient<$Result.GetResult<Prisma.$QualityCalificationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many QualityCalifications.
     * @param {QualityCalificationCreateManyArgs} args - Arguments to create many QualityCalifications.
     * @example
     * // Create many QualityCalifications
     * const qualityCalification = await prisma.qualityCalification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QualityCalificationCreateManyArgs>(args?: SelectSubset<T, QualityCalificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many QualityCalifications and returns the data saved in the database.
     * @param {QualityCalificationCreateManyAndReturnArgs} args - Arguments to create many QualityCalifications.
     * @example
     * // Create many QualityCalifications
     * const qualityCalification = await prisma.qualityCalification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many QualityCalifications and only return the `id`
     * const qualityCalificationWithIdOnly = await prisma.qualityCalification.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QualityCalificationCreateManyAndReturnArgs>(args?: SelectSubset<T, QualityCalificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QualityCalificationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a QualityCalification.
     * @param {QualityCalificationDeleteArgs} args - Arguments to delete one QualityCalification.
     * @example
     * // Delete one QualityCalification
     * const QualityCalification = await prisma.qualityCalification.delete({
     *   where: {
     *     // ... filter to delete one QualityCalification
     *   }
     * })
     * 
     */
    delete<T extends QualityCalificationDeleteArgs>(args: SelectSubset<T, QualityCalificationDeleteArgs<ExtArgs>>): Prisma__QualityCalificationClient<$Result.GetResult<Prisma.$QualityCalificationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one QualityCalification.
     * @param {QualityCalificationUpdateArgs} args - Arguments to update one QualityCalification.
     * @example
     * // Update one QualityCalification
     * const qualityCalification = await prisma.qualityCalification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QualityCalificationUpdateArgs>(args: SelectSubset<T, QualityCalificationUpdateArgs<ExtArgs>>): Prisma__QualityCalificationClient<$Result.GetResult<Prisma.$QualityCalificationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more QualityCalifications.
     * @param {QualityCalificationDeleteManyArgs} args - Arguments to filter QualityCalifications to delete.
     * @example
     * // Delete a few QualityCalifications
     * const { count } = await prisma.qualityCalification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QualityCalificationDeleteManyArgs>(args?: SelectSubset<T, QualityCalificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QualityCalifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QualityCalificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many QualityCalifications
     * const qualityCalification = await prisma.qualityCalification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QualityCalificationUpdateManyArgs>(args: SelectSubset<T, QualityCalificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one QualityCalification.
     * @param {QualityCalificationUpsertArgs} args - Arguments to update or create a QualityCalification.
     * @example
     * // Update or create a QualityCalification
     * const qualityCalification = await prisma.qualityCalification.upsert({
     *   create: {
     *     // ... data to create a QualityCalification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the QualityCalification we want to update
     *   }
     * })
     */
    upsert<T extends QualityCalificationUpsertArgs>(args: SelectSubset<T, QualityCalificationUpsertArgs<ExtArgs>>): Prisma__QualityCalificationClient<$Result.GetResult<Prisma.$QualityCalificationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of QualityCalifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QualityCalificationCountArgs} args - Arguments to filter QualityCalifications to count.
     * @example
     * // Count the number of QualityCalifications
     * const count = await prisma.qualityCalification.count({
     *   where: {
     *     // ... the filter for the QualityCalifications we want to count
     *   }
     * })
    **/
    count<T extends QualityCalificationCountArgs>(
      args?: Subset<T, QualityCalificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QualityCalificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a QualityCalification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QualityCalificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QualityCalificationAggregateArgs>(args: Subset<T, QualityCalificationAggregateArgs>): Prisma.PrismaPromise<GetQualityCalificationAggregateType<T>>

    /**
     * Group by QualityCalification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QualityCalificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QualityCalificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QualityCalificationGroupByArgs['orderBy'] }
        : { orderBy?: QualityCalificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QualityCalificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQualityCalificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the QualityCalification model
   */
  readonly fields: QualityCalificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for QualityCalification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QualityCalificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    qualification<T extends QualityCalification$qualificationArgs<ExtArgs> = {}>(args?: Subset<T, QualityCalification$qualificationArgs<ExtArgs>>): Prisma__QualificationClient<$Result.GetResult<Prisma.$QualificationPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the QualityCalification model
   */ 
  interface QualityCalificationFieldRefs {
    readonly id: FieldRef<"QualityCalification", 'Int'>
    readonly score: FieldRef<"QualityCalification", 'Int'>
    readonly comments: FieldRef<"QualityCalification", 'String'>
  }
    

  // Custom InputTypes
  /**
   * QualityCalification findUnique
   */
  export type QualityCalificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QualityCalification
     */
    select?: QualityCalificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QualityCalificationInclude<ExtArgs> | null
    /**
     * Filter, which QualityCalification to fetch.
     */
    where: QualityCalificationWhereUniqueInput
  }

  /**
   * QualityCalification findUniqueOrThrow
   */
  export type QualityCalificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QualityCalification
     */
    select?: QualityCalificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QualityCalificationInclude<ExtArgs> | null
    /**
     * Filter, which QualityCalification to fetch.
     */
    where: QualityCalificationWhereUniqueInput
  }

  /**
   * QualityCalification findFirst
   */
  export type QualityCalificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QualityCalification
     */
    select?: QualityCalificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QualityCalificationInclude<ExtArgs> | null
    /**
     * Filter, which QualityCalification to fetch.
     */
    where?: QualityCalificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QualityCalifications to fetch.
     */
    orderBy?: QualityCalificationOrderByWithRelationInput | QualityCalificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QualityCalifications.
     */
    cursor?: QualityCalificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QualityCalifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QualityCalifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QualityCalifications.
     */
    distinct?: QualityCalificationScalarFieldEnum | QualityCalificationScalarFieldEnum[]
  }

  /**
   * QualityCalification findFirstOrThrow
   */
  export type QualityCalificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QualityCalification
     */
    select?: QualityCalificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QualityCalificationInclude<ExtArgs> | null
    /**
     * Filter, which QualityCalification to fetch.
     */
    where?: QualityCalificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QualityCalifications to fetch.
     */
    orderBy?: QualityCalificationOrderByWithRelationInput | QualityCalificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QualityCalifications.
     */
    cursor?: QualityCalificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QualityCalifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QualityCalifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QualityCalifications.
     */
    distinct?: QualityCalificationScalarFieldEnum | QualityCalificationScalarFieldEnum[]
  }

  /**
   * QualityCalification findMany
   */
  export type QualityCalificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QualityCalification
     */
    select?: QualityCalificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QualityCalificationInclude<ExtArgs> | null
    /**
     * Filter, which QualityCalifications to fetch.
     */
    where?: QualityCalificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QualityCalifications to fetch.
     */
    orderBy?: QualityCalificationOrderByWithRelationInput | QualityCalificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing QualityCalifications.
     */
    cursor?: QualityCalificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QualityCalifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QualityCalifications.
     */
    skip?: number
    distinct?: QualityCalificationScalarFieldEnum | QualityCalificationScalarFieldEnum[]
  }

  /**
   * QualityCalification create
   */
  export type QualityCalificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QualityCalification
     */
    select?: QualityCalificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QualityCalificationInclude<ExtArgs> | null
    /**
     * The data needed to create a QualityCalification.
     */
    data: XOR<QualityCalificationCreateInput, QualityCalificationUncheckedCreateInput>
  }

  /**
   * QualityCalification createMany
   */
  export type QualityCalificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many QualityCalifications.
     */
    data: QualityCalificationCreateManyInput | QualityCalificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * QualityCalification createManyAndReturn
   */
  export type QualityCalificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QualityCalification
     */
    select?: QualityCalificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many QualityCalifications.
     */
    data: QualityCalificationCreateManyInput | QualityCalificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * QualityCalification update
   */
  export type QualityCalificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QualityCalification
     */
    select?: QualityCalificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QualityCalificationInclude<ExtArgs> | null
    /**
     * The data needed to update a QualityCalification.
     */
    data: XOR<QualityCalificationUpdateInput, QualityCalificationUncheckedUpdateInput>
    /**
     * Choose, which QualityCalification to update.
     */
    where: QualityCalificationWhereUniqueInput
  }

  /**
   * QualityCalification updateMany
   */
  export type QualityCalificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update QualityCalifications.
     */
    data: XOR<QualityCalificationUpdateManyMutationInput, QualityCalificationUncheckedUpdateManyInput>
    /**
     * Filter which QualityCalifications to update
     */
    where?: QualityCalificationWhereInput
  }

  /**
   * QualityCalification upsert
   */
  export type QualityCalificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QualityCalification
     */
    select?: QualityCalificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QualityCalificationInclude<ExtArgs> | null
    /**
     * The filter to search for the QualityCalification to update in case it exists.
     */
    where: QualityCalificationWhereUniqueInput
    /**
     * In case the QualityCalification found by the `where` argument doesn't exist, create a new QualityCalification with this data.
     */
    create: XOR<QualityCalificationCreateInput, QualityCalificationUncheckedCreateInput>
    /**
     * In case the QualityCalification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QualityCalificationUpdateInput, QualityCalificationUncheckedUpdateInput>
  }

  /**
   * QualityCalification delete
   */
  export type QualityCalificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QualityCalification
     */
    select?: QualityCalificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QualityCalificationInclude<ExtArgs> | null
    /**
     * Filter which QualityCalification to delete.
     */
    where: QualityCalificationWhereUniqueInput
  }

  /**
   * QualityCalification deleteMany
   */
  export type QualityCalificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QualityCalifications to delete
     */
    where?: QualityCalificationWhereInput
  }

  /**
   * QualityCalification.qualification
   */
  export type QualityCalification$qualificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Qualification
     */
    select?: QualificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QualificationInclude<ExtArgs> | null
    where?: QualificationWhereInput
  }

  /**
   * QualityCalification without action
   */
  export type QualityCalificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QualityCalification
     */
    select?: QualityCalificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QualityCalificationInclude<ExtArgs> | null
  }


  /**
   * Model TimeCalification
   */

  export type AggregateTimeCalification = {
    _count: TimeCalificationCountAggregateOutputType | null
    _avg: TimeCalificationAvgAggregateOutputType | null
    _sum: TimeCalificationSumAggregateOutputType | null
    _min: TimeCalificationMinAggregateOutputType | null
    _max: TimeCalificationMaxAggregateOutputType | null
  }

  export type TimeCalificationAvgAggregateOutputType = {
    id: number | null
    score: number | null
  }

  export type TimeCalificationSumAggregateOutputType = {
    id: number | null
    score: number | null
  }

  export type TimeCalificationMinAggregateOutputType = {
    id: number | null
    score: number | null
    comments: string | null
  }

  export type TimeCalificationMaxAggregateOutputType = {
    id: number | null
    score: number | null
    comments: string | null
  }

  export type TimeCalificationCountAggregateOutputType = {
    id: number
    score: number
    comments: number
    _all: number
  }


  export type TimeCalificationAvgAggregateInputType = {
    id?: true
    score?: true
  }

  export type TimeCalificationSumAggregateInputType = {
    id?: true
    score?: true
  }

  export type TimeCalificationMinAggregateInputType = {
    id?: true
    score?: true
    comments?: true
  }

  export type TimeCalificationMaxAggregateInputType = {
    id?: true
    score?: true
    comments?: true
  }

  export type TimeCalificationCountAggregateInputType = {
    id?: true
    score?: true
    comments?: true
    _all?: true
  }

  export type TimeCalificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TimeCalification to aggregate.
     */
    where?: TimeCalificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TimeCalifications to fetch.
     */
    orderBy?: TimeCalificationOrderByWithRelationInput | TimeCalificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TimeCalificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TimeCalifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TimeCalifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TimeCalifications
    **/
    _count?: true | TimeCalificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TimeCalificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TimeCalificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TimeCalificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TimeCalificationMaxAggregateInputType
  }

  export type GetTimeCalificationAggregateType<T extends TimeCalificationAggregateArgs> = {
        [P in keyof T & keyof AggregateTimeCalification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTimeCalification[P]>
      : GetScalarType<T[P], AggregateTimeCalification[P]>
  }




  export type TimeCalificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TimeCalificationWhereInput
    orderBy?: TimeCalificationOrderByWithAggregationInput | TimeCalificationOrderByWithAggregationInput[]
    by: TimeCalificationScalarFieldEnum[] | TimeCalificationScalarFieldEnum
    having?: TimeCalificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TimeCalificationCountAggregateInputType | true
    _avg?: TimeCalificationAvgAggregateInputType
    _sum?: TimeCalificationSumAggregateInputType
    _min?: TimeCalificationMinAggregateInputType
    _max?: TimeCalificationMaxAggregateInputType
  }

  export type TimeCalificationGroupByOutputType = {
    id: number
    score: number
    comments: string
    _count: TimeCalificationCountAggregateOutputType | null
    _avg: TimeCalificationAvgAggregateOutputType | null
    _sum: TimeCalificationSumAggregateOutputType | null
    _min: TimeCalificationMinAggregateOutputType | null
    _max: TimeCalificationMaxAggregateOutputType | null
  }

  type GetTimeCalificationGroupByPayload<T extends TimeCalificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TimeCalificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TimeCalificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TimeCalificationGroupByOutputType[P]>
            : GetScalarType<T[P], TimeCalificationGroupByOutputType[P]>
        }
      >
    >


  export type TimeCalificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    score?: boolean
    comments?: boolean
    qualification?: boolean | TimeCalification$qualificationArgs<ExtArgs>
  }, ExtArgs["result"]["timeCalification"]>

  export type TimeCalificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    score?: boolean
    comments?: boolean
  }, ExtArgs["result"]["timeCalification"]>

  export type TimeCalificationSelectScalar = {
    id?: boolean
    score?: boolean
    comments?: boolean
  }

  export type TimeCalificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    qualification?: boolean | TimeCalification$qualificationArgs<ExtArgs>
  }
  export type TimeCalificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TimeCalificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TimeCalification"
    objects: {
      qualification: Prisma.$QualificationPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      score: number
      comments: string
    }, ExtArgs["result"]["timeCalification"]>
    composites: {}
  }

  type TimeCalificationGetPayload<S extends boolean | null | undefined | TimeCalificationDefaultArgs> = $Result.GetResult<Prisma.$TimeCalificationPayload, S>

  type TimeCalificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TimeCalificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TimeCalificationCountAggregateInputType | true
    }

  export interface TimeCalificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TimeCalification'], meta: { name: 'TimeCalification' } }
    /**
     * Find zero or one TimeCalification that matches the filter.
     * @param {TimeCalificationFindUniqueArgs} args - Arguments to find a TimeCalification
     * @example
     * // Get one TimeCalification
     * const timeCalification = await prisma.timeCalification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TimeCalificationFindUniqueArgs>(args: SelectSubset<T, TimeCalificationFindUniqueArgs<ExtArgs>>): Prisma__TimeCalificationClient<$Result.GetResult<Prisma.$TimeCalificationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TimeCalification that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TimeCalificationFindUniqueOrThrowArgs} args - Arguments to find a TimeCalification
     * @example
     * // Get one TimeCalification
     * const timeCalification = await prisma.timeCalification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TimeCalificationFindUniqueOrThrowArgs>(args: SelectSubset<T, TimeCalificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TimeCalificationClient<$Result.GetResult<Prisma.$TimeCalificationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TimeCalification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimeCalificationFindFirstArgs} args - Arguments to find a TimeCalification
     * @example
     * // Get one TimeCalification
     * const timeCalification = await prisma.timeCalification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TimeCalificationFindFirstArgs>(args?: SelectSubset<T, TimeCalificationFindFirstArgs<ExtArgs>>): Prisma__TimeCalificationClient<$Result.GetResult<Prisma.$TimeCalificationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TimeCalification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimeCalificationFindFirstOrThrowArgs} args - Arguments to find a TimeCalification
     * @example
     * // Get one TimeCalification
     * const timeCalification = await prisma.timeCalification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TimeCalificationFindFirstOrThrowArgs>(args?: SelectSubset<T, TimeCalificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__TimeCalificationClient<$Result.GetResult<Prisma.$TimeCalificationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TimeCalifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimeCalificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TimeCalifications
     * const timeCalifications = await prisma.timeCalification.findMany()
     * 
     * // Get first 10 TimeCalifications
     * const timeCalifications = await prisma.timeCalification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const timeCalificationWithIdOnly = await prisma.timeCalification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TimeCalificationFindManyArgs>(args?: SelectSubset<T, TimeCalificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimeCalificationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TimeCalification.
     * @param {TimeCalificationCreateArgs} args - Arguments to create a TimeCalification.
     * @example
     * // Create one TimeCalification
     * const TimeCalification = await prisma.timeCalification.create({
     *   data: {
     *     // ... data to create a TimeCalification
     *   }
     * })
     * 
     */
    create<T extends TimeCalificationCreateArgs>(args: SelectSubset<T, TimeCalificationCreateArgs<ExtArgs>>): Prisma__TimeCalificationClient<$Result.GetResult<Prisma.$TimeCalificationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TimeCalifications.
     * @param {TimeCalificationCreateManyArgs} args - Arguments to create many TimeCalifications.
     * @example
     * // Create many TimeCalifications
     * const timeCalification = await prisma.timeCalification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TimeCalificationCreateManyArgs>(args?: SelectSubset<T, TimeCalificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TimeCalifications and returns the data saved in the database.
     * @param {TimeCalificationCreateManyAndReturnArgs} args - Arguments to create many TimeCalifications.
     * @example
     * // Create many TimeCalifications
     * const timeCalification = await prisma.timeCalification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TimeCalifications and only return the `id`
     * const timeCalificationWithIdOnly = await prisma.timeCalification.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TimeCalificationCreateManyAndReturnArgs>(args?: SelectSubset<T, TimeCalificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimeCalificationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TimeCalification.
     * @param {TimeCalificationDeleteArgs} args - Arguments to delete one TimeCalification.
     * @example
     * // Delete one TimeCalification
     * const TimeCalification = await prisma.timeCalification.delete({
     *   where: {
     *     // ... filter to delete one TimeCalification
     *   }
     * })
     * 
     */
    delete<T extends TimeCalificationDeleteArgs>(args: SelectSubset<T, TimeCalificationDeleteArgs<ExtArgs>>): Prisma__TimeCalificationClient<$Result.GetResult<Prisma.$TimeCalificationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TimeCalification.
     * @param {TimeCalificationUpdateArgs} args - Arguments to update one TimeCalification.
     * @example
     * // Update one TimeCalification
     * const timeCalification = await prisma.timeCalification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TimeCalificationUpdateArgs>(args: SelectSubset<T, TimeCalificationUpdateArgs<ExtArgs>>): Prisma__TimeCalificationClient<$Result.GetResult<Prisma.$TimeCalificationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TimeCalifications.
     * @param {TimeCalificationDeleteManyArgs} args - Arguments to filter TimeCalifications to delete.
     * @example
     * // Delete a few TimeCalifications
     * const { count } = await prisma.timeCalification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TimeCalificationDeleteManyArgs>(args?: SelectSubset<T, TimeCalificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TimeCalifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimeCalificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TimeCalifications
     * const timeCalification = await prisma.timeCalification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TimeCalificationUpdateManyArgs>(args: SelectSubset<T, TimeCalificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TimeCalification.
     * @param {TimeCalificationUpsertArgs} args - Arguments to update or create a TimeCalification.
     * @example
     * // Update or create a TimeCalification
     * const timeCalification = await prisma.timeCalification.upsert({
     *   create: {
     *     // ... data to create a TimeCalification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TimeCalification we want to update
     *   }
     * })
     */
    upsert<T extends TimeCalificationUpsertArgs>(args: SelectSubset<T, TimeCalificationUpsertArgs<ExtArgs>>): Prisma__TimeCalificationClient<$Result.GetResult<Prisma.$TimeCalificationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TimeCalifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimeCalificationCountArgs} args - Arguments to filter TimeCalifications to count.
     * @example
     * // Count the number of TimeCalifications
     * const count = await prisma.timeCalification.count({
     *   where: {
     *     // ... the filter for the TimeCalifications we want to count
     *   }
     * })
    **/
    count<T extends TimeCalificationCountArgs>(
      args?: Subset<T, TimeCalificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TimeCalificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TimeCalification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimeCalificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TimeCalificationAggregateArgs>(args: Subset<T, TimeCalificationAggregateArgs>): Prisma.PrismaPromise<GetTimeCalificationAggregateType<T>>

    /**
     * Group by TimeCalification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimeCalificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TimeCalificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TimeCalificationGroupByArgs['orderBy'] }
        : { orderBy?: TimeCalificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TimeCalificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTimeCalificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TimeCalification model
   */
  readonly fields: TimeCalificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TimeCalification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TimeCalificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    qualification<T extends TimeCalification$qualificationArgs<ExtArgs> = {}>(args?: Subset<T, TimeCalification$qualificationArgs<ExtArgs>>): Prisma__QualificationClient<$Result.GetResult<Prisma.$QualificationPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TimeCalification model
   */ 
  interface TimeCalificationFieldRefs {
    readonly id: FieldRef<"TimeCalification", 'Int'>
    readonly score: FieldRef<"TimeCalification", 'Int'>
    readonly comments: FieldRef<"TimeCalification", 'String'>
  }
    

  // Custom InputTypes
  /**
   * TimeCalification findUnique
   */
  export type TimeCalificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeCalification
     */
    select?: TimeCalificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeCalificationInclude<ExtArgs> | null
    /**
     * Filter, which TimeCalification to fetch.
     */
    where: TimeCalificationWhereUniqueInput
  }

  /**
   * TimeCalification findUniqueOrThrow
   */
  export type TimeCalificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeCalification
     */
    select?: TimeCalificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeCalificationInclude<ExtArgs> | null
    /**
     * Filter, which TimeCalification to fetch.
     */
    where: TimeCalificationWhereUniqueInput
  }

  /**
   * TimeCalification findFirst
   */
  export type TimeCalificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeCalification
     */
    select?: TimeCalificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeCalificationInclude<ExtArgs> | null
    /**
     * Filter, which TimeCalification to fetch.
     */
    where?: TimeCalificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TimeCalifications to fetch.
     */
    orderBy?: TimeCalificationOrderByWithRelationInput | TimeCalificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TimeCalifications.
     */
    cursor?: TimeCalificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TimeCalifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TimeCalifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TimeCalifications.
     */
    distinct?: TimeCalificationScalarFieldEnum | TimeCalificationScalarFieldEnum[]
  }

  /**
   * TimeCalification findFirstOrThrow
   */
  export type TimeCalificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeCalification
     */
    select?: TimeCalificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeCalificationInclude<ExtArgs> | null
    /**
     * Filter, which TimeCalification to fetch.
     */
    where?: TimeCalificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TimeCalifications to fetch.
     */
    orderBy?: TimeCalificationOrderByWithRelationInput | TimeCalificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TimeCalifications.
     */
    cursor?: TimeCalificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TimeCalifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TimeCalifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TimeCalifications.
     */
    distinct?: TimeCalificationScalarFieldEnum | TimeCalificationScalarFieldEnum[]
  }

  /**
   * TimeCalification findMany
   */
  export type TimeCalificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeCalification
     */
    select?: TimeCalificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeCalificationInclude<ExtArgs> | null
    /**
     * Filter, which TimeCalifications to fetch.
     */
    where?: TimeCalificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TimeCalifications to fetch.
     */
    orderBy?: TimeCalificationOrderByWithRelationInput | TimeCalificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TimeCalifications.
     */
    cursor?: TimeCalificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TimeCalifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TimeCalifications.
     */
    skip?: number
    distinct?: TimeCalificationScalarFieldEnum | TimeCalificationScalarFieldEnum[]
  }

  /**
   * TimeCalification create
   */
  export type TimeCalificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeCalification
     */
    select?: TimeCalificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeCalificationInclude<ExtArgs> | null
    /**
     * The data needed to create a TimeCalification.
     */
    data: XOR<TimeCalificationCreateInput, TimeCalificationUncheckedCreateInput>
  }

  /**
   * TimeCalification createMany
   */
  export type TimeCalificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TimeCalifications.
     */
    data: TimeCalificationCreateManyInput | TimeCalificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TimeCalification createManyAndReturn
   */
  export type TimeCalificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeCalification
     */
    select?: TimeCalificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TimeCalifications.
     */
    data: TimeCalificationCreateManyInput | TimeCalificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TimeCalification update
   */
  export type TimeCalificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeCalification
     */
    select?: TimeCalificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeCalificationInclude<ExtArgs> | null
    /**
     * The data needed to update a TimeCalification.
     */
    data: XOR<TimeCalificationUpdateInput, TimeCalificationUncheckedUpdateInput>
    /**
     * Choose, which TimeCalification to update.
     */
    where: TimeCalificationWhereUniqueInput
  }

  /**
   * TimeCalification updateMany
   */
  export type TimeCalificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TimeCalifications.
     */
    data: XOR<TimeCalificationUpdateManyMutationInput, TimeCalificationUncheckedUpdateManyInput>
    /**
     * Filter which TimeCalifications to update
     */
    where?: TimeCalificationWhereInput
  }

  /**
   * TimeCalification upsert
   */
  export type TimeCalificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeCalification
     */
    select?: TimeCalificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeCalificationInclude<ExtArgs> | null
    /**
     * The filter to search for the TimeCalification to update in case it exists.
     */
    where: TimeCalificationWhereUniqueInput
    /**
     * In case the TimeCalification found by the `where` argument doesn't exist, create a new TimeCalification with this data.
     */
    create: XOR<TimeCalificationCreateInput, TimeCalificationUncheckedCreateInput>
    /**
     * In case the TimeCalification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TimeCalificationUpdateInput, TimeCalificationUncheckedUpdateInput>
  }

  /**
   * TimeCalification delete
   */
  export type TimeCalificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeCalification
     */
    select?: TimeCalificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeCalificationInclude<ExtArgs> | null
    /**
     * Filter which TimeCalification to delete.
     */
    where: TimeCalificationWhereUniqueInput
  }

  /**
   * TimeCalification deleteMany
   */
  export type TimeCalificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TimeCalifications to delete
     */
    where?: TimeCalificationWhereInput
  }

  /**
   * TimeCalification.qualification
   */
  export type TimeCalification$qualificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Qualification
     */
    select?: QualificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QualificationInclude<ExtArgs> | null
    where?: QualificationWhereInput
  }

  /**
   * TimeCalification without action
   */
  export type TimeCalificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TimeCalification
     */
    select?: TimeCalificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TimeCalificationInclude<ExtArgs> | null
  }


  /**
   * Model PackagingCalification
   */

  export type AggregatePackagingCalification = {
    _count: PackagingCalificationCountAggregateOutputType | null
    _avg: PackagingCalificationAvgAggregateOutputType | null
    _sum: PackagingCalificationSumAggregateOutputType | null
    _min: PackagingCalificationMinAggregateOutputType | null
    _max: PackagingCalificationMaxAggregateOutputType | null
  }

  export type PackagingCalificationAvgAggregateOutputType = {
    id: number | null
    score: number | null
  }

  export type PackagingCalificationSumAggregateOutputType = {
    id: number | null
    score: number | null
  }

  export type PackagingCalificationMinAggregateOutputType = {
    id: number | null
    score: number | null
    comments: string | null
  }

  export type PackagingCalificationMaxAggregateOutputType = {
    id: number | null
    score: number | null
    comments: string | null
  }

  export type PackagingCalificationCountAggregateOutputType = {
    id: number
    score: number
    comments: number
    _all: number
  }


  export type PackagingCalificationAvgAggregateInputType = {
    id?: true
    score?: true
  }

  export type PackagingCalificationSumAggregateInputType = {
    id?: true
    score?: true
  }

  export type PackagingCalificationMinAggregateInputType = {
    id?: true
    score?: true
    comments?: true
  }

  export type PackagingCalificationMaxAggregateInputType = {
    id?: true
    score?: true
    comments?: true
  }

  export type PackagingCalificationCountAggregateInputType = {
    id?: true
    score?: true
    comments?: true
    _all?: true
  }

  export type PackagingCalificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PackagingCalification to aggregate.
     */
    where?: PackagingCalificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PackagingCalifications to fetch.
     */
    orderBy?: PackagingCalificationOrderByWithRelationInput | PackagingCalificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PackagingCalificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PackagingCalifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PackagingCalifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PackagingCalifications
    **/
    _count?: true | PackagingCalificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PackagingCalificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PackagingCalificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PackagingCalificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PackagingCalificationMaxAggregateInputType
  }

  export type GetPackagingCalificationAggregateType<T extends PackagingCalificationAggregateArgs> = {
        [P in keyof T & keyof AggregatePackagingCalification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePackagingCalification[P]>
      : GetScalarType<T[P], AggregatePackagingCalification[P]>
  }




  export type PackagingCalificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PackagingCalificationWhereInput
    orderBy?: PackagingCalificationOrderByWithAggregationInput | PackagingCalificationOrderByWithAggregationInput[]
    by: PackagingCalificationScalarFieldEnum[] | PackagingCalificationScalarFieldEnum
    having?: PackagingCalificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PackagingCalificationCountAggregateInputType | true
    _avg?: PackagingCalificationAvgAggregateInputType
    _sum?: PackagingCalificationSumAggregateInputType
    _min?: PackagingCalificationMinAggregateInputType
    _max?: PackagingCalificationMaxAggregateInputType
  }

  export type PackagingCalificationGroupByOutputType = {
    id: number
    score: number
    comments: string
    _count: PackagingCalificationCountAggregateOutputType | null
    _avg: PackagingCalificationAvgAggregateOutputType | null
    _sum: PackagingCalificationSumAggregateOutputType | null
    _min: PackagingCalificationMinAggregateOutputType | null
    _max: PackagingCalificationMaxAggregateOutputType | null
  }

  type GetPackagingCalificationGroupByPayload<T extends PackagingCalificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PackagingCalificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PackagingCalificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PackagingCalificationGroupByOutputType[P]>
            : GetScalarType<T[P], PackagingCalificationGroupByOutputType[P]>
        }
      >
    >


  export type PackagingCalificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    score?: boolean
    comments?: boolean
    qualification?: boolean | PackagingCalification$qualificationArgs<ExtArgs>
  }, ExtArgs["result"]["packagingCalification"]>

  export type PackagingCalificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    score?: boolean
    comments?: boolean
  }, ExtArgs["result"]["packagingCalification"]>

  export type PackagingCalificationSelectScalar = {
    id?: boolean
    score?: boolean
    comments?: boolean
  }

  export type PackagingCalificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    qualification?: boolean | PackagingCalification$qualificationArgs<ExtArgs>
  }
  export type PackagingCalificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PackagingCalificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PackagingCalification"
    objects: {
      qualification: Prisma.$QualificationPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      score: number
      comments: string
    }, ExtArgs["result"]["packagingCalification"]>
    composites: {}
  }

  type PackagingCalificationGetPayload<S extends boolean | null | undefined | PackagingCalificationDefaultArgs> = $Result.GetResult<Prisma.$PackagingCalificationPayload, S>

  type PackagingCalificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PackagingCalificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PackagingCalificationCountAggregateInputType | true
    }

  export interface PackagingCalificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PackagingCalification'], meta: { name: 'PackagingCalification' } }
    /**
     * Find zero or one PackagingCalification that matches the filter.
     * @param {PackagingCalificationFindUniqueArgs} args - Arguments to find a PackagingCalification
     * @example
     * // Get one PackagingCalification
     * const packagingCalification = await prisma.packagingCalification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PackagingCalificationFindUniqueArgs>(args: SelectSubset<T, PackagingCalificationFindUniqueArgs<ExtArgs>>): Prisma__PackagingCalificationClient<$Result.GetResult<Prisma.$PackagingCalificationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PackagingCalification that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PackagingCalificationFindUniqueOrThrowArgs} args - Arguments to find a PackagingCalification
     * @example
     * // Get one PackagingCalification
     * const packagingCalification = await prisma.packagingCalification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PackagingCalificationFindUniqueOrThrowArgs>(args: SelectSubset<T, PackagingCalificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PackagingCalificationClient<$Result.GetResult<Prisma.$PackagingCalificationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PackagingCalification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackagingCalificationFindFirstArgs} args - Arguments to find a PackagingCalification
     * @example
     * // Get one PackagingCalification
     * const packagingCalification = await prisma.packagingCalification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PackagingCalificationFindFirstArgs>(args?: SelectSubset<T, PackagingCalificationFindFirstArgs<ExtArgs>>): Prisma__PackagingCalificationClient<$Result.GetResult<Prisma.$PackagingCalificationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PackagingCalification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackagingCalificationFindFirstOrThrowArgs} args - Arguments to find a PackagingCalification
     * @example
     * // Get one PackagingCalification
     * const packagingCalification = await prisma.packagingCalification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PackagingCalificationFindFirstOrThrowArgs>(args?: SelectSubset<T, PackagingCalificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__PackagingCalificationClient<$Result.GetResult<Prisma.$PackagingCalificationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PackagingCalifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackagingCalificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PackagingCalifications
     * const packagingCalifications = await prisma.packagingCalification.findMany()
     * 
     * // Get first 10 PackagingCalifications
     * const packagingCalifications = await prisma.packagingCalification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const packagingCalificationWithIdOnly = await prisma.packagingCalification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PackagingCalificationFindManyArgs>(args?: SelectSubset<T, PackagingCalificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackagingCalificationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PackagingCalification.
     * @param {PackagingCalificationCreateArgs} args - Arguments to create a PackagingCalification.
     * @example
     * // Create one PackagingCalification
     * const PackagingCalification = await prisma.packagingCalification.create({
     *   data: {
     *     // ... data to create a PackagingCalification
     *   }
     * })
     * 
     */
    create<T extends PackagingCalificationCreateArgs>(args: SelectSubset<T, PackagingCalificationCreateArgs<ExtArgs>>): Prisma__PackagingCalificationClient<$Result.GetResult<Prisma.$PackagingCalificationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PackagingCalifications.
     * @param {PackagingCalificationCreateManyArgs} args - Arguments to create many PackagingCalifications.
     * @example
     * // Create many PackagingCalifications
     * const packagingCalification = await prisma.packagingCalification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PackagingCalificationCreateManyArgs>(args?: SelectSubset<T, PackagingCalificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PackagingCalifications and returns the data saved in the database.
     * @param {PackagingCalificationCreateManyAndReturnArgs} args - Arguments to create many PackagingCalifications.
     * @example
     * // Create many PackagingCalifications
     * const packagingCalification = await prisma.packagingCalification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PackagingCalifications and only return the `id`
     * const packagingCalificationWithIdOnly = await prisma.packagingCalification.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PackagingCalificationCreateManyAndReturnArgs>(args?: SelectSubset<T, PackagingCalificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackagingCalificationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PackagingCalification.
     * @param {PackagingCalificationDeleteArgs} args - Arguments to delete one PackagingCalification.
     * @example
     * // Delete one PackagingCalification
     * const PackagingCalification = await prisma.packagingCalification.delete({
     *   where: {
     *     // ... filter to delete one PackagingCalification
     *   }
     * })
     * 
     */
    delete<T extends PackagingCalificationDeleteArgs>(args: SelectSubset<T, PackagingCalificationDeleteArgs<ExtArgs>>): Prisma__PackagingCalificationClient<$Result.GetResult<Prisma.$PackagingCalificationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PackagingCalification.
     * @param {PackagingCalificationUpdateArgs} args - Arguments to update one PackagingCalification.
     * @example
     * // Update one PackagingCalification
     * const packagingCalification = await prisma.packagingCalification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PackagingCalificationUpdateArgs>(args: SelectSubset<T, PackagingCalificationUpdateArgs<ExtArgs>>): Prisma__PackagingCalificationClient<$Result.GetResult<Prisma.$PackagingCalificationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PackagingCalifications.
     * @param {PackagingCalificationDeleteManyArgs} args - Arguments to filter PackagingCalifications to delete.
     * @example
     * // Delete a few PackagingCalifications
     * const { count } = await prisma.packagingCalification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PackagingCalificationDeleteManyArgs>(args?: SelectSubset<T, PackagingCalificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PackagingCalifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackagingCalificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PackagingCalifications
     * const packagingCalification = await prisma.packagingCalification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PackagingCalificationUpdateManyArgs>(args: SelectSubset<T, PackagingCalificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PackagingCalification.
     * @param {PackagingCalificationUpsertArgs} args - Arguments to update or create a PackagingCalification.
     * @example
     * // Update or create a PackagingCalification
     * const packagingCalification = await prisma.packagingCalification.upsert({
     *   create: {
     *     // ... data to create a PackagingCalification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PackagingCalification we want to update
     *   }
     * })
     */
    upsert<T extends PackagingCalificationUpsertArgs>(args: SelectSubset<T, PackagingCalificationUpsertArgs<ExtArgs>>): Prisma__PackagingCalificationClient<$Result.GetResult<Prisma.$PackagingCalificationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PackagingCalifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackagingCalificationCountArgs} args - Arguments to filter PackagingCalifications to count.
     * @example
     * // Count the number of PackagingCalifications
     * const count = await prisma.packagingCalification.count({
     *   where: {
     *     // ... the filter for the PackagingCalifications we want to count
     *   }
     * })
    **/
    count<T extends PackagingCalificationCountArgs>(
      args?: Subset<T, PackagingCalificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PackagingCalificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PackagingCalification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackagingCalificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PackagingCalificationAggregateArgs>(args: Subset<T, PackagingCalificationAggregateArgs>): Prisma.PrismaPromise<GetPackagingCalificationAggregateType<T>>

    /**
     * Group by PackagingCalification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackagingCalificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PackagingCalificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PackagingCalificationGroupByArgs['orderBy'] }
        : { orderBy?: PackagingCalificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PackagingCalificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPackagingCalificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PackagingCalification model
   */
  readonly fields: PackagingCalificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PackagingCalification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PackagingCalificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    qualification<T extends PackagingCalification$qualificationArgs<ExtArgs> = {}>(args?: Subset<T, PackagingCalification$qualificationArgs<ExtArgs>>): Prisma__QualificationClient<$Result.GetResult<Prisma.$QualificationPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PackagingCalification model
   */ 
  interface PackagingCalificationFieldRefs {
    readonly id: FieldRef<"PackagingCalification", 'Int'>
    readonly score: FieldRef<"PackagingCalification", 'Int'>
    readonly comments: FieldRef<"PackagingCalification", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PackagingCalification findUnique
   */
  export type PackagingCalificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackagingCalification
     */
    select?: PackagingCalificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackagingCalificationInclude<ExtArgs> | null
    /**
     * Filter, which PackagingCalification to fetch.
     */
    where: PackagingCalificationWhereUniqueInput
  }

  /**
   * PackagingCalification findUniqueOrThrow
   */
  export type PackagingCalificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackagingCalification
     */
    select?: PackagingCalificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackagingCalificationInclude<ExtArgs> | null
    /**
     * Filter, which PackagingCalification to fetch.
     */
    where: PackagingCalificationWhereUniqueInput
  }

  /**
   * PackagingCalification findFirst
   */
  export type PackagingCalificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackagingCalification
     */
    select?: PackagingCalificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackagingCalificationInclude<ExtArgs> | null
    /**
     * Filter, which PackagingCalification to fetch.
     */
    where?: PackagingCalificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PackagingCalifications to fetch.
     */
    orderBy?: PackagingCalificationOrderByWithRelationInput | PackagingCalificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PackagingCalifications.
     */
    cursor?: PackagingCalificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PackagingCalifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PackagingCalifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PackagingCalifications.
     */
    distinct?: PackagingCalificationScalarFieldEnum | PackagingCalificationScalarFieldEnum[]
  }

  /**
   * PackagingCalification findFirstOrThrow
   */
  export type PackagingCalificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackagingCalification
     */
    select?: PackagingCalificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackagingCalificationInclude<ExtArgs> | null
    /**
     * Filter, which PackagingCalification to fetch.
     */
    where?: PackagingCalificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PackagingCalifications to fetch.
     */
    orderBy?: PackagingCalificationOrderByWithRelationInput | PackagingCalificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PackagingCalifications.
     */
    cursor?: PackagingCalificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PackagingCalifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PackagingCalifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PackagingCalifications.
     */
    distinct?: PackagingCalificationScalarFieldEnum | PackagingCalificationScalarFieldEnum[]
  }

  /**
   * PackagingCalification findMany
   */
  export type PackagingCalificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackagingCalification
     */
    select?: PackagingCalificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackagingCalificationInclude<ExtArgs> | null
    /**
     * Filter, which PackagingCalifications to fetch.
     */
    where?: PackagingCalificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PackagingCalifications to fetch.
     */
    orderBy?: PackagingCalificationOrderByWithRelationInput | PackagingCalificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PackagingCalifications.
     */
    cursor?: PackagingCalificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PackagingCalifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PackagingCalifications.
     */
    skip?: number
    distinct?: PackagingCalificationScalarFieldEnum | PackagingCalificationScalarFieldEnum[]
  }

  /**
   * PackagingCalification create
   */
  export type PackagingCalificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackagingCalification
     */
    select?: PackagingCalificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackagingCalificationInclude<ExtArgs> | null
    /**
     * The data needed to create a PackagingCalification.
     */
    data: XOR<PackagingCalificationCreateInput, PackagingCalificationUncheckedCreateInput>
  }

  /**
   * PackagingCalification createMany
   */
  export type PackagingCalificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PackagingCalifications.
     */
    data: PackagingCalificationCreateManyInput | PackagingCalificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PackagingCalification createManyAndReturn
   */
  export type PackagingCalificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackagingCalification
     */
    select?: PackagingCalificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PackagingCalifications.
     */
    data: PackagingCalificationCreateManyInput | PackagingCalificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PackagingCalification update
   */
  export type PackagingCalificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackagingCalification
     */
    select?: PackagingCalificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackagingCalificationInclude<ExtArgs> | null
    /**
     * The data needed to update a PackagingCalification.
     */
    data: XOR<PackagingCalificationUpdateInput, PackagingCalificationUncheckedUpdateInput>
    /**
     * Choose, which PackagingCalification to update.
     */
    where: PackagingCalificationWhereUniqueInput
  }

  /**
   * PackagingCalification updateMany
   */
  export type PackagingCalificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PackagingCalifications.
     */
    data: XOR<PackagingCalificationUpdateManyMutationInput, PackagingCalificationUncheckedUpdateManyInput>
    /**
     * Filter which PackagingCalifications to update
     */
    where?: PackagingCalificationWhereInput
  }

  /**
   * PackagingCalification upsert
   */
  export type PackagingCalificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackagingCalification
     */
    select?: PackagingCalificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackagingCalificationInclude<ExtArgs> | null
    /**
     * The filter to search for the PackagingCalification to update in case it exists.
     */
    where: PackagingCalificationWhereUniqueInput
    /**
     * In case the PackagingCalification found by the `where` argument doesn't exist, create a new PackagingCalification with this data.
     */
    create: XOR<PackagingCalificationCreateInput, PackagingCalificationUncheckedCreateInput>
    /**
     * In case the PackagingCalification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PackagingCalificationUpdateInput, PackagingCalificationUncheckedUpdateInput>
  }

  /**
   * PackagingCalification delete
   */
  export type PackagingCalificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackagingCalification
     */
    select?: PackagingCalificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackagingCalificationInclude<ExtArgs> | null
    /**
     * Filter which PackagingCalification to delete.
     */
    where: PackagingCalificationWhereUniqueInput
  }

  /**
   * PackagingCalification deleteMany
   */
  export type PackagingCalificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PackagingCalifications to delete
     */
    where?: PackagingCalificationWhereInput
  }

  /**
   * PackagingCalification.qualification
   */
  export type PackagingCalification$qualificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Qualification
     */
    select?: QualificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QualificationInclude<ExtArgs> | null
    where?: QualificationWhereInput
  }

  /**
   * PackagingCalification without action
   */
  export type PackagingCalificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackagingCalification
     */
    select?: PackagingCalificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackagingCalificationInclude<ExtArgs> | null
  }


  /**
   * Model CommunicationCalification
   */

  export type AggregateCommunicationCalification = {
    _count: CommunicationCalificationCountAggregateOutputType | null
    _avg: CommunicationCalificationAvgAggregateOutputType | null
    _sum: CommunicationCalificationSumAggregateOutputType | null
    _min: CommunicationCalificationMinAggregateOutputType | null
    _max: CommunicationCalificationMaxAggregateOutputType | null
  }

  export type CommunicationCalificationAvgAggregateOutputType = {
    id: number | null
    score: number | null
  }

  export type CommunicationCalificationSumAggregateOutputType = {
    id: number | null
    score: number | null
  }

  export type CommunicationCalificationMinAggregateOutputType = {
    id: number | null
    score: number | null
    comments: string | null
  }

  export type CommunicationCalificationMaxAggregateOutputType = {
    id: number | null
    score: number | null
    comments: string | null
  }

  export type CommunicationCalificationCountAggregateOutputType = {
    id: number
    score: number
    comments: number
    _all: number
  }


  export type CommunicationCalificationAvgAggregateInputType = {
    id?: true
    score?: true
  }

  export type CommunicationCalificationSumAggregateInputType = {
    id?: true
    score?: true
  }

  export type CommunicationCalificationMinAggregateInputType = {
    id?: true
    score?: true
    comments?: true
  }

  export type CommunicationCalificationMaxAggregateInputType = {
    id?: true
    score?: true
    comments?: true
  }

  export type CommunicationCalificationCountAggregateInputType = {
    id?: true
    score?: true
    comments?: true
    _all?: true
  }

  export type CommunicationCalificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CommunicationCalification to aggregate.
     */
    where?: CommunicationCalificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommunicationCalifications to fetch.
     */
    orderBy?: CommunicationCalificationOrderByWithRelationInput | CommunicationCalificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommunicationCalificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommunicationCalifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommunicationCalifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CommunicationCalifications
    **/
    _count?: true | CommunicationCalificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommunicationCalificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommunicationCalificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommunicationCalificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommunicationCalificationMaxAggregateInputType
  }

  export type GetCommunicationCalificationAggregateType<T extends CommunicationCalificationAggregateArgs> = {
        [P in keyof T & keyof AggregateCommunicationCalification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCommunicationCalification[P]>
      : GetScalarType<T[P], AggregateCommunicationCalification[P]>
  }




  export type CommunicationCalificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommunicationCalificationWhereInput
    orderBy?: CommunicationCalificationOrderByWithAggregationInput | CommunicationCalificationOrderByWithAggregationInput[]
    by: CommunicationCalificationScalarFieldEnum[] | CommunicationCalificationScalarFieldEnum
    having?: CommunicationCalificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommunicationCalificationCountAggregateInputType | true
    _avg?: CommunicationCalificationAvgAggregateInputType
    _sum?: CommunicationCalificationSumAggregateInputType
    _min?: CommunicationCalificationMinAggregateInputType
    _max?: CommunicationCalificationMaxAggregateInputType
  }

  export type CommunicationCalificationGroupByOutputType = {
    id: number
    score: number
    comments: string
    _count: CommunicationCalificationCountAggregateOutputType | null
    _avg: CommunicationCalificationAvgAggregateOutputType | null
    _sum: CommunicationCalificationSumAggregateOutputType | null
    _min: CommunicationCalificationMinAggregateOutputType | null
    _max: CommunicationCalificationMaxAggregateOutputType | null
  }

  type GetCommunicationCalificationGroupByPayload<T extends CommunicationCalificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommunicationCalificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommunicationCalificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommunicationCalificationGroupByOutputType[P]>
            : GetScalarType<T[P], CommunicationCalificationGroupByOutputType[P]>
        }
      >
    >


  export type CommunicationCalificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    score?: boolean
    comments?: boolean
    qualification?: boolean | CommunicationCalification$qualificationArgs<ExtArgs>
  }, ExtArgs["result"]["communicationCalification"]>

  export type CommunicationCalificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    score?: boolean
    comments?: boolean
  }, ExtArgs["result"]["communicationCalification"]>

  export type CommunicationCalificationSelectScalar = {
    id?: boolean
    score?: boolean
    comments?: boolean
  }

  export type CommunicationCalificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    qualification?: boolean | CommunicationCalification$qualificationArgs<ExtArgs>
  }
  export type CommunicationCalificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CommunicationCalificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CommunicationCalification"
    objects: {
      qualification: Prisma.$QualificationPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      score: number
      comments: string
    }, ExtArgs["result"]["communicationCalification"]>
    composites: {}
  }

  type CommunicationCalificationGetPayload<S extends boolean | null | undefined | CommunicationCalificationDefaultArgs> = $Result.GetResult<Prisma.$CommunicationCalificationPayload, S>

  type CommunicationCalificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CommunicationCalificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CommunicationCalificationCountAggregateInputType | true
    }

  export interface CommunicationCalificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CommunicationCalification'], meta: { name: 'CommunicationCalification' } }
    /**
     * Find zero or one CommunicationCalification that matches the filter.
     * @param {CommunicationCalificationFindUniqueArgs} args - Arguments to find a CommunicationCalification
     * @example
     * // Get one CommunicationCalification
     * const communicationCalification = await prisma.communicationCalification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommunicationCalificationFindUniqueArgs>(args: SelectSubset<T, CommunicationCalificationFindUniqueArgs<ExtArgs>>): Prisma__CommunicationCalificationClient<$Result.GetResult<Prisma.$CommunicationCalificationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CommunicationCalification that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CommunicationCalificationFindUniqueOrThrowArgs} args - Arguments to find a CommunicationCalification
     * @example
     * // Get one CommunicationCalification
     * const communicationCalification = await prisma.communicationCalification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommunicationCalificationFindUniqueOrThrowArgs>(args: SelectSubset<T, CommunicationCalificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommunicationCalificationClient<$Result.GetResult<Prisma.$CommunicationCalificationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CommunicationCalification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunicationCalificationFindFirstArgs} args - Arguments to find a CommunicationCalification
     * @example
     * // Get one CommunicationCalification
     * const communicationCalification = await prisma.communicationCalification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommunicationCalificationFindFirstArgs>(args?: SelectSubset<T, CommunicationCalificationFindFirstArgs<ExtArgs>>): Prisma__CommunicationCalificationClient<$Result.GetResult<Prisma.$CommunicationCalificationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CommunicationCalification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunicationCalificationFindFirstOrThrowArgs} args - Arguments to find a CommunicationCalification
     * @example
     * // Get one CommunicationCalification
     * const communicationCalification = await prisma.communicationCalification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommunicationCalificationFindFirstOrThrowArgs>(args?: SelectSubset<T, CommunicationCalificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommunicationCalificationClient<$Result.GetResult<Prisma.$CommunicationCalificationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CommunicationCalifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunicationCalificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CommunicationCalifications
     * const communicationCalifications = await prisma.communicationCalification.findMany()
     * 
     * // Get first 10 CommunicationCalifications
     * const communicationCalifications = await prisma.communicationCalification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const communicationCalificationWithIdOnly = await prisma.communicationCalification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommunicationCalificationFindManyArgs>(args?: SelectSubset<T, CommunicationCalificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommunicationCalificationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CommunicationCalification.
     * @param {CommunicationCalificationCreateArgs} args - Arguments to create a CommunicationCalification.
     * @example
     * // Create one CommunicationCalification
     * const CommunicationCalification = await prisma.communicationCalification.create({
     *   data: {
     *     // ... data to create a CommunicationCalification
     *   }
     * })
     * 
     */
    create<T extends CommunicationCalificationCreateArgs>(args: SelectSubset<T, CommunicationCalificationCreateArgs<ExtArgs>>): Prisma__CommunicationCalificationClient<$Result.GetResult<Prisma.$CommunicationCalificationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CommunicationCalifications.
     * @param {CommunicationCalificationCreateManyArgs} args - Arguments to create many CommunicationCalifications.
     * @example
     * // Create many CommunicationCalifications
     * const communicationCalification = await prisma.communicationCalification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommunicationCalificationCreateManyArgs>(args?: SelectSubset<T, CommunicationCalificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CommunicationCalifications and returns the data saved in the database.
     * @param {CommunicationCalificationCreateManyAndReturnArgs} args - Arguments to create many CommunicationCalifications.
     * @example
     * // Create many CommunicationCalifications
     * const communicationCalification = await prisma.communicationCalification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CommunicationCalifications and only return the `id`
     * const communicationCalificationWithIdOnly = await prisma.communicationCalification.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CommunicationCalificationCreateManyAndReturnArgs>(args?: SelectSubset<T, CommunicationCalificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommunicationCalificationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CommunicationCalification.
     * @param {CommunicationCalificationDeleteArgs} args - Arguments to delete one CommunicationCalification.
     * @example
     * // Delete one CommunicationCalification
     * const CommunicationCalification = await prisma.communicationCalification.delete({
     *   where: {
     *     // ... filter to delete one CommunicationCalification
     *   }
     * })
     * 
     */
    delete<T extends CommunicationCalificationDeleteArgs>(args: SelectSubset<T, CommunicationCalificationDeleteArgs<ExtArgs>>): Prisma__CommunicationCalificationClient<$Result.GetResult<Prisma.$CommunicationCalificationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CommunicationCalification.
     * @param {CommunicationCalificationUpdateArgs} args - Arguments to update one CommunicationCalification.
     * @example
     * // Update one CommunicationCalification
     * const communicationCalification = await prisma.communicationCalification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommunicationCalificationUpdateArgs>(args: SelectSubset<T, CommunicationCalificationUpdateArgs<ExtArgs>>): Prisma__CommunicationCalificationClient<$Result.GetResult<Prisma.$CommunicationCalificationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CommunicationCalifications.
     * @param {CommunicationCalificationDeleteManyArgs} args - Arguments to filter CommunicationCalifications to delete.
     * @example
     * // Delete a few CommunicationCalifications
     * const { count } = await prisma.communicationCalification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommunicationCalificationDeleteManyArgs>(args?: SelectSubset<T, CommunicationCalificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CommunicationCalifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunicationCalificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CommunicationCalifications
     * const communicationCalification = await prisma.communicationCalification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommunicationCalificationUpdateManyArgs>(args: SelectSubset<T, CommunicationCalificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CommunicationCalification.
     * @param {CommunicationCalificationUpsertArgs} args - Arguments to update or create a CommunicationCalification.
     * @example
     * // Update or create a CommunicationCalification
     * const communicationCalification = await prisma.communicationCalification.upsert({
     *   create: {
     *     // ... data to create a CommunicationCalification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CommunicationCalification we want to update
     *   }
     * })
     */
    upsert<T extends CommunicationCalificationUpsertArgs>(args: SelectSubset<T, CommunicationCalificationUpsertArgs<ExtArgs>>): Prisma__CommunicationCalificationClient<$Result.GetResult<Prisma.$CommunicationCalificationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CommunicationCalifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunicationCalificationCountArgs} args - Arguments to filter CommunicationCalifications to count.
     * @example
     * // Count the number of CommunicationCalifications
     * const count = await prisma.communicationCalification.count({
     *   where: {
     *     // ... the filter for the CommunicationCalifications we want to count
     *   }
     * })
    **/
    count<T extends CommunicationCalificationCountArgs>(
      args?: Subset<T, CommunicationCalificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommunicationCalificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CommunicationCalification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunicationCalificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommunicationCalificationAggregateArgs>(args: Subset<T, CommunicationCalificationAggregateArgs>): Prisma.PrismaPromise<GetCommunicationCalificationAggregateType<T>>

    /**
     * Group by CommunicationCalification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunicationCalificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommunicationCalificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommunicationCalificationGroupByArgs['orderBy'] }
        : { orderBy?: CommunicationCalificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommunicationCalificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommunicationCalificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CommunicationCalification model
   */
  readonly fields: CommunicationCalificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CommunicationCalification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommunicationCalificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    qualification<T extends CommunicationCalification$qualificationArgs<ExtArgs> = {}>(args?: Subset<T, CommunicationCalification$qualificationArgs<ExtArgs>>): Prisma__QualificationClient<$Result.GetResult<Prisma.$QualificationPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CommunicationCalification model
   */ 
  interface CommunicationCalificationFieldRefs {
    readonly id: FieldRef<"CommunicationCalification", 'Int'>
    readonly score: FieldRef<"CommunicationCalification", 'Int'>
    readonly comments: FieldRef<"CommunicationCalification", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CommunicationCalification findUnique
   */
  export type CommunicationCalificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunicationCalification
     */
    select?: CommunicationCalificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunicationCalificationInclude<ExtArgs> | null
    /**
     * Filter, which CommunicationCalification to fetch.
     */
    where: CommunicationCalificationWhereUniqueInput
  }

  /**
   * CommunicationCalification findUniqueOrThrow
   */
  export type CommunicationCalificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunicationCalification
     */
    select?: CommunicationCalificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunicationCalificationInclude<ExtArgs> | null
    /**
     * Filter, which CommunicationCalification to fetch.
     */
    where: CommunicationCalificationWhereUniqueInput
  }

  /**
   * CommunicationCalification findFirst
   */
  export type CommunicationCalificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunicationCalification
     */
    select?: CommunicationCalificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunicationCalificationInclude<ExtArgs> | null
    /**
     * Filter, which CommunicationCalification to fetch.
     */
    where?: CommunicationCalificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommunicationCalifications to fetch.
     */
    orderBy?: CommunicationCalificationOrderByWithRelationInput | CommunicationCalificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CommunicationCalifications.
     */
    cursor?: CommunicationCalificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommunicationCalifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommunicationCalifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CommunicationCalifications.
     */
    distinct?: CommunicationCalificationScalarFieldEnum | CommunicationCalificationScalarFieldEnum[]
  }

  /**
   * CommunicationCalification findFirstOrThrow
   */
  export type CommunicationCalificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunicationCalification
     */
    select?: CommunicationCalificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunicationCalificationInclude<ExtArgs> | null
    /**
     * Filter, which CommunicationCalification to fetch.
     */
    where?: CommunicationCalificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommunicationCalifications to fetch.
     */
    orderBy?: CommunicationCalificationOrderByWithRelationInput | CommunicationCalificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CommunicationCalifications.
     */
    cursor?: CommunicationCalificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommunicationCalifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommunicationCalifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CommunicationCalifications.
     */
    distinct?: CommunicationCalificationScalarFieldEnum | CommunicationCalificationScalarFieldEnum[]
  }

  /**
   * CommunicationCalification findMany
   */
  export type CommunicationCalificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunicationCalification
     */
    select?: CommunicationCalificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunicationCalificationInclude<ExtArgs> | null
    /**
     * Filter, which CommunicationCalifications to fetch.
     */
    where?: CommunicationCalificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommunicationCalifications to fetch.
     */
    orderBy?: CommunicationCalificationOrderByWithRelationInput | CommunicationCalificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CommunicationCalifications.
     */
    cursor?: CommunicationCalificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommunicationCalifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommunicationCalifications.
     */
    skip?: number
    distinct?: CommunicationCalificationScalarFieldEnum | CommunicationCalificationScalarFieldEnum[]
  }

  /**
   * CommunicationCalification create
   */
  export type CommunicationCalificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunicationCalification
     */
    select?: CommunicationCalificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunicationCalificationInclude<ExtArgs> | null
    /**
     * The data needed to create a CommunicationCalification.
     */
    data: XOR<CommunicationCalificationCreateInput, CommunicationCalificationUncheckedCreateInput>
  }

  /**
   * CommunicationCalification createMany
   */
  export type CommunicationCalificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CommunicationCalifications.
     */
    data: CommunicationCalificationCreateManyInput | CommunicationCalificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CommunicationCalification createManyAndReturn
   */
  export type CommunicationCalificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunicationCalification
     */
    select?: CommunicationCalificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CommunicationCalifications.
     */
    data: CommunicationCalificationCreateManyInput | CommunicationCalificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CommunicationCalification update
   */
  export type CommunicationCalificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunicationCalification
     */
    select?: CommunicationCalificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunicationCalificationInclude<ExtArgs> | null
    /**
     * The data needed to update a CommunicationCalification.
     */
    data: XOR<CommunicationCalificationUpdateInput, CommunicationCalificationUncheckedUpdateInput>
    /**
     * Choose, which CommunicationCalification to update.
     */
    where: CommunicationCalificationWhereUniqueInput
  }

  /**
   * CommunicationCalification updateMany
   */
  export type CommunicationCalificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CommunicationCalifications.
     */
    data: XOR<CommunicationCalificationUpdateManyMutationInput, CommunicationCalificationUncheckedUpdateManyInput>
    /**
     * Filter which CommunicationCalifications to update
     */
    where?: CommunicationCalificationWhereInput
  }

  /**
   * CommunicationCalification upsert
   */
  export type CommunicationCalificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunicationCalification
     */
    select?: CommunicationCalificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunicationCalificationInclude<ExtArgs> | null
    /**
     * The filter to search for the CommunicationCalification to update in case it exists.
     */
    where: CommunicationCalificationWhereUniqueInput
    /**
     * In case the CommunicationCalification found by the `where` argument doesn't exist, create a new CommunicationCalification with this data.
     */
    create: XOR<CommunicationCalificationCreateInput, CommunicationCalificationUncheckedCreateInput>
    /**
     * In case the CommunicationCalification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommunicationCalificationUpdateInput, CommunicationCalificationUncheckedUpdateInput>
  }

  /**
   * CommunicationCalification delete
   */
  export type CommunicationCalificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunicationCalification
     */
    select?: CommunicationCalificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunicationCalificationInclude<ExtArgs> | null
    /**
     * Filter which CommunicationCalification to delete.
     */
    where: CommunicationCalificationWhereUniqueInput
  }

  /**
   * CommunicationCalification deleteMany
   */
  export type CommunicationCalificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CommunicationCalifications to delete
     */
    where?: CommunicationCalificationWhereInput
  }

  /**
   * CommunicationCalification.qualification
   */
  export type CommunicationCalification$qualificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Qualification
     */
    select?: QualificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QualificationInclude<ExtArgs> | null
    where?: QualificationWhereInput
  }

  /**
   * CommunicationCalification without action
   */
  export type CommunicationCalificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunicationCalification
     */
    select?: CommunicationCalificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunicationCalificationInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const QualificationScalarFieldEnum: {
    id: 'id',
    donationId: 'donationId',
    donatorId: 'donatorId',
    organizationId: 'organizationId',
    qualityCalificationId: 'qualityCalificationId',
    timeCalificationId: 'timeCalificationId',
    packagingCalificationId: 'packagingCalificationId',
    communicationCalificationId: 'communicationCalificationId',
    generalScore: 'generalScore',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type QualificationScalarFieldEnum = (typeof QualificationScalarFieldEnum)[keyof typeof QualificationScalarFieldEnum]


  export const QualityCalificationScalarFieldEnum: {
    id: 'id',
    score: 'score',
    comments: 'comments'
  };

  export type QualityCalificationScalarFieldEnum = (typeof QualityCalificationScalarFieldEnum)[keyof typeof QualityCalificationScalarFieldEnum]


  export const TimeCalificationScalarFieldEnum: {
    id: 'id',
    score: 'score',
    comments: 'comments'
  };

  export type TimeCalificationScalarFieldEnum = (typeof TimeCalificationScalarFieldEnum)[keyof typeof TimeCalificationScalarFieldEnum]


  export const PackagingCalificationScalarFieldEnum: {
    id: 'id',
    score: 'score',
    comments: 'comments'
  };

  export type PackagingCalificationScalarFieldEnum = (typeof PackagingCalificationScalarFieldEnum)[keyof typeof PackagingCalificationScalarFieldEnum]


  export const CommunicationCalificationScalarFieldEnum: {
    id: 'id',
    score: 'score',
    comments: 'comments'
  };

  export type CommunicationCalificationScalarFieldEnum = (typeof CommunicationCalificationScalarFieldEnum)[keyof typeof CommunicationCalificationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    
  /**
   * Deep Input Types
   */


  export type QualificationWhereInput = {
    AND?: QualificationWhereInput | QualificationWhereInput[]
    OR?: QualificationWhereInput[]
    NOT?: QualificationWhereInput | QualificationWhereInput[]
    id?: IntFilter<"Qualification"> | number
    donationId?: StringFilter<"Qualification"> | string
    donatorId?: StringFilter<"Qualification"> | string
    organizationId?: StringFilter<"Qualification"> | string
    qualityCalificationId?: IntFilter<"Qualification"> | number
    timeCalificationId?: IntFilter<"Qualification"> | number
    packagingCalificationId?: IntFilter<"Qualification"> | number
    communicationCalificationId?: IntFilter<"Qualification"> | number
    generalScore?: FloatFilter<"Qualification"> | number
    notes?: StringFilter<"Qualification"> | string
    createdAt?: DateTimeFilter<"Qualification"> | Date | string
    updatedAt?: DateTimeFilter<"Qualification"> | Date | string
    qualityCalification?: XOR<QualityCalificationNullableRelationFilter, QualityCalificationWhereInput> | null
    timeCalification?: XOR<TimeCalificationNullableRelationFilter, TimeCalificationWhereInput> | null
    packagingCalification?: XOR<PackagingCalificationNullableRelationFilter, PackagingCalificationWhereInput> | null
    communicationCalification?: XOR<CommunicationCalificationNullableRelationFilter, CommunicationCalificationWhereInput> | null
  }

  export type QualificationOrderByWithRelationInput = {
    id?: SortOrder
    donationId?: SortOrder
    donatorId?: SortOrder
    organizationId?: SortOrder
    qualityCalificationId?: SortOrder
    timeCalificationId?: SortOrder
    packagingCalificationId?: SortOrder
    communicationCalificationId?: SortOrder
    generalScore?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    qualityCalification?: QualityCalificationOrderByWithRelationInput
    timeCalification?: TimeCalificationOrderByWithRelationInput
    packagingCalification?: PackagingCalificationOrderByWithRelationInput
    communicationCalification?: CommunicationCalificationOrderByWithRelationInput
  }

  export type QualificationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    qualityCalificationId?: number
    timeCalificationId?: number
    packagingCalificationId?: number
    communicationCalificationId?: number
    AND?: QualificationWhereInput | QualificationWhereInput[]
    OR?: QualificationWhereInput[]
    NOT?: QualificationWhereInput | QualificationWhereInput[]
    donationId?: StringFilter<"Qualification"> | string
    donatorId?: StringFilter<"Qualification"> | string
    organizationId?: StringFilter<"Qualification"> | string
    generalScore?: FloatFilter<"Qualification"> | number
    notes?: StringFilter<"Qualification"> | string
    createdAt?: DateTimeFilter<"Qualification"> | Date | string
    updatedAt?: DateTimeFilter<"Qualification"> | Date | string
    qualityCalification?: XOR<QualityCalificationNullableRelationFilter, QualityCalificationWhereInput> | null
    timeCalification?: XOR<TimeCalificationNullableRelationFilter, TimeCalificationWhereInput> | null
    packagingCalification?: XOR<PackagingCalificationNullableRelationFilter, PackagingCalificationWhereInput> | null
    communicationCalification?: XOR<CommunicationCalificationNullableRelationFilter, CommunicationCalificationWhereInput> | null
  }, "id" | "qualityCalificationId" | "timeCalificationId" | "packagingCalificationId" | "communicationCalificationId">

  export type QualificationOrderByWithAggregationInput = {
    id?: SortOrder
    donationId?: SortOrder
    donatorId?: SortOrder
    organizationId?: SortOrder
    qualityCalificationId?: SortOrder
    timeCalificationId?: SortOrder
    packagingCalificationId?: SortOrder
    communicationCalificationId?: SortOrder
    generalScore?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: QualificationCountOrderByAggregateInput
    _avg?: QualificationAvgOrderByAggregateInput
    _max?: QualificationMaxOrderByAggregateInput
    _min?: QualificationMinOrderByAggregateInput
    _sum?: QualificationSumOrderByAggregateInput
  }

  export type QualificationScalarWhereWithAggregatesInput = {
    AND?: QualificationScalarWhereWithAggregatesInput | QualificationScalarWhereWithAggregatesInput[]
    OR?: QualificationScalarWhereWithAggregatesInput[]
    NOT?: QualificationScalarWhereWithAggregatesInput | QualificationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Qualification"> | number
    donationId?: StringWithAggregatesFilter<"Qualification"> | string
    donatorId?: StringWithAggregatesFilter<"Qualification"> | string
    organizationId?: StringWithAggregatesFilter<"Qualification"> | string
    qualityCalificationId?: IntWithAggregatesFilter<"Qualification"> | number
    timeCalificationId?: IntWithAggregatesFilter<"Qualification"> | number
    packagingCalificationId?: IntWithAggregatesFilter<"Qualification"> | number
    communicationCalificationId?: IntWithAggregatesFilter<"Qualification"> | number
    generalScore?: FloatWithAggregatesFilter<"Qualification"> | number
    notes?: StringWithAggregatesFilter<"Qualification"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Qualification"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Qualification"> | Date | string
  }

  export type QualityCalificationWhereInput = {
    AND?: QualityCalificationWhereInput | QualityCalificationWhereInput[]
    OR?: QualityCalificationWhereInput[]
    NOT?: QualityCalificationWhereInput | QualityCalificationWhereInput[]
    id?: IntFilter<"QualityCalification"> | number
    score?: IntFilter<"QualityCalification"> | number
    comments?: StringFilter<"QualityCalification"> | string
    qualification?: XOR<QualificationNullableRelationFilter, QualificationWhereInput> | null
  }

  export type QualityCalificationOrderByWithRelationInput = {
    id?: SortOrder
    score?: SortOrder
    comments?: SortOrder
    qualification?: QualificationOrderByWithRelationInput
  }

  export type QualityCalificationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: QualityCalificationWhereInput | QualityCalificationWhereInput[]
    OR?: QualityCalificationWhereInput[]
    NOT?: QualityCalificationWhereInput | QualityCalificationWhereInput[]
    score?: IntFilter<"QualityCalification"> | number
    comments?: StringFilter<"QualityCalification"> | string
    qualification?: XOR<QualificationNullableRelationFilter, QualificationWhereInput> | null
  }, "id">

  export type QualityCalificationOrderByWithAggregationInput = {
    id?: SortOrder
    score?: SortOrder
    comments?: SortOrder
    _count?: QualityCalificationCountOrderByAggregateInput
    _avg?: QualityCalificationAvgOrderByAggregateInput
    _max?: QualityCalificationMaxOrderByAggregateInput
    _min?: QualityCalificationMinOrderByAggregateInput
    _sum?: QualityCalificationSumOrderByAggregateInput
  }

  export type QualityCalificationScalarWhereWithAggregatesInput = {
    AND?: QualityCalificationScalarWhereWithAggregatesInput | QualityCalificationScalarWhereWithAggregatesInput[]
    OR?: QualityCalificationScalarWhereWithAggregatesInput[]
    NOT?: QualityCalificationScalarWhereWithAggregatesInput | QualityCalificationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"QualityCalification"> | number
    score?: IntWithAggregatesFilter<"QualityCalification"> | number
    comments?: StringWithAggregatesFilter<"QualityCalification"> | string
  }

  export type TimeCalificationWhereInput = {
    AND?: TimeCalificationWhereInput | TimeCalificationWhereInput[]
    OR?: TimeCalificationWhereInput[]
    NOT?: TimeCalificationWhereInput | TimeCalificationWhereInput[]
    id?: IntFilter<"TimeCalification"> | number
    score?: IntFilter<"TimeCalification"> | number
    comments?: StringFilter<"TimeCalification"> | string
    qualification?: XOR<QualificationNullableRelationFilter, QualificationWhereInput> | null
  }

  export type TimeCalificationOrderByWithRelationInput = {
    id?: SortOrder
    score?: SortOrder
    comments?: SortOrder
    qualification?: QualificationOrderByWithRelationInput
  }

  export type TimeCalificationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TimeCalificationWhereInput | TimeCalificationWhereInput[]
    OR?: TimeCalificationWhereInput[]
    NOT?: TimeCalificationWhereInput | TimeCalificationWhereInput[]
    score?: IntFilter<"TimeCalification"> | number
    comments?: StringFilter<"TimeCalification"> | string
    qualification?: XOR<QualificationNullableRelationFilter, QualificationWhereInput> | null
  }, "id">

  export type TimeCalificationOrderByWithAggregationInput = {
    id?: SortOrder
    score?: SortOrder
    comments?: SortOrder
    _count?: TimeCalificationCountOrderByAggregateInput
    _avg?: TimeCalificationAvgOrderByAggregateInput
    _max?: TimeCalificationMaxOrderByAggregateInput
    _min?: TimeCalificationMinOrderByAggregateInput
    _sum?: TimeCalificationSumOrderByAggregateInput
  }

  export type TimeCalificationScalarWhereWithAggregatesInput = {
    AND?: TimeCalificationScalarWhereWithAggregatesInput | TimeCalificationScalarWhereWithAggregatesInput[]
    OR?: TimeCalificationScalarWhereWithAggregatesInput[]
    NOT?: TimeCalificationScalarWhereWithAggregatesInput | TimeCalificationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TimeCalification"> | number
    score?: IntWithAggregatesFilter<"TimeCalification"> | number
    comments?: StringWithAggregatesFilter<"TimeCalification"> | string
  }

  export type PackagingCalificationWhereInput = {
    AND?: PackagingCalificationWhereInput | PackagingCalificationWhereInput[]
    OR?: PackagingCalificationWhereInput[]
    NOT?: PackagingCalificationWhereInput | PackagingCalificationWhereInput[]
    id?: IntFilter<"PackagingCalification"> | number
    score?: IntFilter<"PackagingCalification"> | number
    comments?: StringFilter<"PackagingCalification"> | string
    qualification?: XOR<QualificationNullableRelationFilter, QualificationWhereInput> | null
  }

  export type PackagingCalificationOrderByWithRelationInput = {
    id?: SortOrder
    score?: SortOrder
    comments?: SortOrder
    qualification?: QualificationOrderByWithRelationInput
  }

  export type PackagingCalificationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PackagingCalificationWhereInput | PackagingCalificationWhereInput[]
    OR?: PackagingCalificationWhereInput[]
    NOT?: PackagingCalificationWhereInput | PackagingCalificationWhereInput[]
    score?: IntFilter<"PackagingCalification"> | number
    comments?: StringFilter<"PackagingCalification"> | string
    qualification?: XOR<QualificationNullableRelationFilter, QualificationWhereInput> | null
  }, "id">

  export type PackagingCalificationOrderByWithAggregationInput = {
    id?: SortOrder
    score?: SortOrder
    comments?: SortOrder
    _count?: PackagingCalificationCountOrderByAggregateInput
    _avg?: PackagingCalificationAvgOrderByAggregateInput
    _max?: PackagingCalificationMaxOrderByAggregateInput
    _min?: PackagingCalificationMinOrderByAggregateInput
    _sum?: PackagingCalificationSumOrderByAggregateInput
  }

  export type PackagingCalificationScalarWhereWithAggregatesInput = {
    AND?: PackagingCalificationScalarWhereWithAggregatesInput | PackagingCalificationScalarWhereWithAggregatesInput[]
    OR?: PackagingCalificationScalarWhereWithAggregatesInput[]
    NOT?: PackagingCalificationScalarWhereWithAggregatesInput | PackagingCalificationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PackagingCalification"> | number
    score?: IntWithAggregatesFilter<"PackagingCalification"> | number
    comments?: StringWithAggregatesFilter<"PackagingCalification"> | string
  }

  export type CommunicationCalificationWhereInput = {
    AND?: CommunicationCalificationWhereInput | CommunicationCalificationWhereInput[]
    OR?: CommunicationCalificationWhereInput[]
    NOT?: CommunicationCalificationWhereInput | CommunicationCalificationWhereInput[]
    id?: IntFilter<"CommunicationCalification"> | number
    score?: IntFilter<"CommunicationCalification"> | number
    comments?: StringFilter<"CommunicationCalification"> | string
    qualification?: XOR<QualificationNullableRelationFilter, QualificationWhereInput> | null
  }

  export type CommunicationCalificationOrderByWithRelationInput = {
    id?: SortOrder
    score?: SortOrder
    comments?: SortOrder
    qualification?: QualificationOrderByWithRelationInput
  }

  export type CommunicationCalificationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CommunicationCalificationWhereInput | CommunicationCalificationWhereInput[]
    OR?: CommunicationCalificationWhereInput[]
    NOT?: CommunicationCalificationWhereInput | CommunicationCalificationWhereInput[]
    score?: IntFilter<"CommunicationCalification"> | number
    comments?: StringFilter<"CommunicationCalification"> | string
    qualification?: XOR<QualificationNullableRelationFilter, QualificationWhereInput> | null
  }, "id">

  export type CommunicationCalificationOrderByWithAggregationInput = {
    id?: SortOrder
    score?: SortOrder
    comments?: SortOrder
    _count?: CommunicationCalificationCountOrderByAggregateInput
    _avg?: CommunicationCalificationAvgOrderByAggregateInput
    _max?: CommunicationCalificationMaxOrderByAggregateInput
    _min?: CommunicationCalificationMinOrderByAggregateInput
    _sum?: CommunicationCalificationSumOrderByAggregateInput
  }

  export type CommunicationCalificationScalarWhereWithAggregatesInput = {
    AND?: CommunicationCalificationScalarWhereWithAggregatesInput | CommunicationCalificationScalarWhereWithAggregatesInput[]
    OR?: CommunicationCalificationScalarWhereWithAggregatesInput[]
    NOT?: CommunicationCalificationScalarWhereWithAggregatesInput | CommunicationCalificationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CommunicationCalification"> | number
    score?: IntWithAggregatesFilter<"CommunicationCalification"> | number
    comments?: StringWithAggregatesFilter<"CommunicationCalification"> | string
  }

  export type QualificationCreateInput = {
    donationId: string
    donatorId: string
    organizationId: string
    generalScore: number
    notes: string
    createdAt?: Date | string
    updatedAt?: Date | string
    qualityCalification?: QualityCalificationCreateNestedOneWithoutQualificationInput
    timeCalification?: TimeCalificationCreateNestedOneWithoutQualificationInput
    packagingCalification?: PackagingCalificationCreateNestedOneWithoutQualificationInput
    communicationCalification?: CommunicationCalificationCreateNestedOneWithoutQualificationInput
  }

  export type QualificationUncheckedCreateInput = {
    id?: number
    donationId: string
    donatorId: string
    organizationId: string
    qualityCalificationId: number
    timeCalificationId: number
    packagingCalificationId: number
    communicationCalificationId: number
    generalScore: number
    notes: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QualificationUpdateInput = {
    donationId?: StringFieldUpdateOperationsInput | string
    donatorId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    generalScore?: FloatFieldUpdateOperationsInput | number
    notes?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qualityCalification?: QualityCalificationUpdateOneWithoutQualificationNestedInput
    timeCalification?: TimeCalificationUpdateOneWithoutQualificationNestedInput
    packagingCalification?: PackagingCalificationUpdateOneWithoutQualificationNestedInput
    communicationCalification?: CommunicationCalificationUpdateOneWithoutQualificationNestedInput
  }

  export type QualificationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    donationId?: StringFieldUpdateOperationsInput | string
    donatorId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    qualityCalificationId?: IntFieldUpdateOperationsInput | number
    timeCalificationId?: IntFieldUpdateOperationsInput | number
    packagingCalificationId?: IntFieldUpdateOperationsInput | number
    communicationCalificationId?: IntFieldUpdateOperationsInput | number
    generalScore?: FloatFieldUpdateOperationsInput | number
    notes?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QualificationCreateManyInput = {
    id?: number
    donationId: string
    donatorId: string
    organizationId: string
    qualityCalificationId: number
    timeCalificationId: number
    packagingCalificationId: number
    communicationCalificationId: number
    generalScore: number
    notes: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QualificationUpdateManyMutationInput = {
    donationId?: StringFieldUpdateOperationsInput | string
    donatorId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    generalScore?: FloatFieldUpdateOperationsInput | number
    notes?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QualificationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    donationId?: StringFieldUpdateOperationsInput | string
    donatorId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    qualityCalificationId?: IntFieldUpdateOperationsInput | number
    timeCalificationId?: IntFieldUpdateOperationsInput | number
    packagingCalificationId?: IntFieldUpdateOperationsInput | number
    communicationCalificationId?: IntFieldUpdateOperationsInput | number
    generalScore?: FloatFieldUpdateOperationsInput | number
    notes?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QualityCalificationCreateInput = {
    score: number
    comments: string
    qualification?: QualificationCreateNestedOneWithoutQualityCalificationInput
  }

  export type QualityCalificationUncheckedCreateInput = {
    id?: number
    score: number
    comments: string
    qualification?: QualificationUncheckedCreateNestedOneWithoutQualityCalificationInput
  }

  export type QualityCalificationUpdateInput = {
    score?: IntFieldUpdateOperationsInput | number
    comments?: StringFieldUpdateOperationsInput | string
    qualification?: QualificationUpdateOneWithoutQualityCalificationNestedInput
  }

  export type QualityCalificationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    comments?: StringFieldUpdateOperationsInput | string
    qualification?: QualificationUncheckedUpdateOneWithoutQualityCalificationNestedInput
  }

  export type QualityCalificationCreateManyInput = {
    id?: number
    score: number
    comments: string
  }

  export type QualityCalificationUpdateManyMutationInput = {
    score?: IntFieldUpdateOperationsInput | number
    comments?: StringFieldUpdateOperationsInput | string
  }

  export type QualityCalificationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    comments?: StringFieldUpdateOperationsInput | string
  }

  export type TimeCalificationCreateInput = {
    score: number
    comments: string
    qualification?: QualificationCreateNestedOneWithoutTimeCalificationInput
  }

  export type TimeCalificationUncheckedCreateInput = {
    id?: number
    score: number
    comments: string
    qualification?: QualificationUncheckedCreateNestedOneWithoutTimeCalificationInput
  }

  export type TimeCalificationUpdateInput = {
    score?: IntFieldUpdateOperationsInput | number
    comments?: StringFieldUpdateOperationsInput | string
    qualification?: QualificationUpdateOneWithoutTimeCalificationNestedInput
  }

  export type TimeCalificationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    comments?: StringFieldUpdateOperationsInput | string
    qualification?: QualificationUncheckedUpdateOneWithoutTimeCalificationNestedInput
  }

  export type TimeCalificationCreateManyInput = {
    id?: number
    score: number
    comments: string
  }

  export type TimeCalificationUpdateManyMutationInput = {
    score?: IntFieldUpdateOperationsInput | number
    comments?: StringFieldUpdateOperationsInput | string
  }

  export type TimeCalificationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    comments?: StringFieldUpdateOperationsInput | string
  }

  export type PackagingCalificationCreateInput = {
    score: number
    comments: string
    qualification?: QualificationCreateNestedOneWithoutPackagingCalificationInput
  }

  export type PackagingCalificationUncheckedCreateInput = {
    id?: number
    score: number
    comments: string
    qualification?: QualificationUncheckedCreateNestedOneWithoutPackagingCalificationInput
  }

  export type PackagingCalificationUpdateInput = {
    score?: IntFieldUpdateOperationsInput | number
    comments?: StringFieldUpdateOperationsInput | string
    qualification?: QualificationUpdateOneWithoutPackagingCalificationNestedInput
  }

  export type PackagingCalificationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    comments?: StringFieldUpdateOperationsInput | string
    qualification?: QualificationUncheckedUpdateOneWithoutPackagingCalificationNestedInput
  }

  export type PackagingCalificationCreateManyInput = {
    id?: number
    score: number
    comments: string
  }

  export type PackagingCalificationUpdateManyMutationInput = {
    score?: IntFieldUpdateOperationsInput | number
    comments?: StringFieldUpdateOperationsInput | string
  }

  export type PackagingCalificationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    comments?: StringFieldUpdateOperationsInput | string
  }

  export type CommunicationCalificationCreateInput = {
    score: number
    comments: string
    qualification?: QualificationCreateNestedOneWithoutCommunicationCalificationInput
  }

  export type CommunicationCalificationUncheckedCreateInput = {
    id?: number
    score: number
    comments: string
    qualification?: QualificationUncheckedCreateNestedOneWithoutCommunicationCalificationInput
  }

  export type CommunicationCalificationUpdateInput = {
    score?: IntFieldUpdateOperationsInput | number
    comments?: StringFieldUpdateOperationsInput | string
    qualification?: QualificationUpdateOneWithoutCommunicationCalificationNestedInput
  }

  export type CommunicationCalificationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    comments?: StringFieldUpdateOperationsInput | string
    qualification?: QualificationUncheckedUpdateOneWithoutCommunicationCalificationNestedInput
  }

  export type CommunicationCalificationCreateManyInput = {
    id?: number
    score: number
    comments: string
  }

  export type CommunicationCalificationUpdateManyMutationInput = {
    score?: IntFieldUpdateOperationsInput | number
    comments?: StringFieldUpdateOperationsInput | string
  }

  export type CommunicationCalificationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    comments?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type QualityCalificationNullableRelationFilter = {
    is?: QualityCalificationWhereInput | null
    isNot?: QualityCalificationWhereInput | null
  }

  export type TimeCalificationNullableRelationFilter = {
    is?: TimeCalificationWhereInput | null
    isNot?: TimeCalificationWhereInput | null
  }

  export type PackagingCalificationNullableRelationFilter = {
    is?: PackagingCalificationWhereInput | null
    isNot?: PackagingCalificationWhereInput | null
  }

  export type CommunicationCalificationNullableRelationFilter = {
    is?: CommunicationCalificationWhereInput | null
    isNot?: CommunicationCalificationWhereInput | null
  }

  export type QualificationCountOrderByAggregateInput = {
    id?: SortOrder
    donationId?: SortOrder
    donatorId?: SortOrder
    organizationId?: SortOrder
    qualityCalificationId?: SortOrder
    timeCalificationId?: SortOrder
    packagingCalificationId?: SortOrder
    communicationCalificationId?: SortOrder
    generalScore?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QualificationAvgOrderByAggregateInput = {
    id?: SortOrder
    qualityCalificationId?: SortOrder
    timeCalificationId?: SortOrder
    packagingCalificationId?: SortOrder
    communicationCalificationId?: SortOrder
    generalScore?: SortOrder
  }

  export type QualificationMaxOrderByAggregateInput = {
    id?: SortOrder
    donationId?: SortOrder
    donatorId?: SortOrder
    organizationId?: SortOrder
    qualityCalificationId?: SortOrder
    timeCalificationId?: SortOrder
    packagingCalificationId?: SortOrder
    communicationCalificationId?: SortOrder
    generalScore?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QualificationMinOrderByAggregateInput = {
    id?: SortOrder
    donationId?: SortOrder
    donatorId?: SortOrder
    organizationId?: SortOrder
    qualityCalificationId?: SortOrder
    timeCalificationId?: SortOrder
    packagingCalificationId?: SortOrder
    communicationCalificationId?: SortOrder
    generalScore?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QualificationSumOrderByAggregateInput = {
    id?: SortOrder
    qualityCalificationId?: SortOrder
    timeCalificationId?: SortOrder
    packagingCalificationId?: SortOrder
    communicationCalificationId?: SortOrder
    generalScore?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type QualificationNullableRelationFilter = {
    is?: QualificationWhereInput | null
    isNot?: QualificationWhereInput | null
  }

  export type QualityCalificationCountOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
    comments?: SortOrder
  }

  export type QualityCalificationAvgOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
  }

  export type QualityCalificationMaxOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
    comments?: SortOrder
  }

  export type QualityCalificationMinOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
    comments?: SortOrder
  }

  export type QualityCalificationSumOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
  }

  export type TimeCalificationCountOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
    comments?: SortOrder
  }

  export type TimeCalificationAvgOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
  }

  export type TimeCalificationMaxOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
    comments?: SortOrder
  }

  export type TimeCalificationMinOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
    comments?: SortOrder
  }

  export type TimeCalificationSumOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
  }

  export type PackagingCalificationCountOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
    comments?: SortOrder
  }

  export type PackagingCalificationAvgOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
  }

  export type PackagingCalificationMaxOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
    comments?: SortOrder
  }

  export type PackagingCalificationMinOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
    comments?: SortOrder
  }

  export type PackagingCalificationSumOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
  }

  export type CommunicationCalificationCountOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
    comments?: SortOrder
  }

  export type CommunicationCalificationAvgOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
  }

  export type CommunicationCalificationMaxOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
    comments?: SortOrder
  }

  export type CommunicationCalificationMinOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
    comments?: SortOrder
  }

  export type CommunicationCalificationSumOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
  }

  export type QualityCalificationCreateNestedOneWithoutQualificationInput = {
    create?: XOR<QualityCalificationCreateWithoutQualificationInput, QualityCalificationUncheckedCreateWithoutQualificationInput>
    connectOrCreate?: QualityCalificationCreateOrConnectWithoutQualificationInput
    connect?: QualityCalificationWhereUniqueInput
  }

  export type TimeCalificationCreateNestedOneWithoutQualificationInput = {
    create?: XOR<TimeCalificationCreateWithoutQualificationInput, TimeCalificationUncheckedCreateWithoutQualificationInput>
    connectOrCreate?: TimeCalificationCreateOrConnectWithoutQualificationInput
    connect?: TimeCalificationWhereUniqueInput
  }

  export type PackagingCalificationCreateNestedOneWithoutQualificationInput = {
    create?: XOR<PackagingCalificationCreateWithoutQualificationInput, PackagingCalificationUncheckedCreateWithoutQualificationInput>
    connectOrCreate?: PackagingCalificationCreateOrConnectWithoutQualificationInput
    connect?: PackagingCalificationWhereUniqueInput
  }

  export type CommunicationCalificationCreateNestedOneWithoutQualificationInput = {
    create?: XOR<CommunicationCalificationCreateWithoutQualificationInput, CommunicationCalificationUncheckedCreateWithoutQualificationInput>
    connectOrCreate?: CommunicationCalificationCreateOrConnectWithoutQualificationInput
    connect?: CommunicationCalificationWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type QualityCalificationUpdateOneWithoutQualificationNestedInput = {
    create?: XOR<QualityCalificationCreateWithoutQualificationInput, QualityCalificationUncheckedCreateWithoutQualificationInput>
    connectOrCreate?: QualityCalificationCreateOrConnectWithoutQualificationInput
    upsert?: QualityCalificationUpsertWithoutQualificationInput
    disconnect?: QualityCalificationWhereInput | boolean
    delete?: QualityCalificationWhereInput | boolean
    connect?: QualityCalificationWhereUniqueInput
    update?: XOR<XOR<QualityCalificationUpdateToOneWithWhereWithoutQualificationInput, QualityCalificationUpdateWithoutQualificationInput>, QualityCalificationUncheckedUpdateWithoutQualificationInput>
  }

  export type TimeCalificationUpdateOneWithoutQualificationNestedInput = {
    create?: XOR<TimeCalificationCreateWithoutQualificationInput, TimeCalificationUncheckedCreateWithoutQualificationInput>
    connectOrCreate?: TimeCalificationCreateOrConnectWithoutQualificationInput
    upsert?: TimeCalificationUpsertWithoutQualificationInput
    disconnect?: TimeCalificationWhereInput | boolean
    delete?: TimeCalificationWhereInput | boolean
    connect?: TimeCalificationWhereUniqueInput
    update?: XOR<XOR<TimeCalificationUpdateToOneWithWhereWithoutQualificationInput, TimeCalificationUpdateWithoutQualificationInput>, TimeCalificationUncheckedUpdateWithoutQualificationInput>
  }

  export type PackagingCalificationUpdateOneWithoutQualificationNestedInput = {
    create?: XOR<PackagingCalificationCreateWithoutQualificationInput, PackagingCalificationUncheckedCreateWithoutQualificationInput>
    connectOrCreate?: PackagingCalificationCreateOrConnectWithoutQualificationInput
    upsert?: PackagingCalificationUpsertWithoutQualificationInput
    disconnect?: PackagingCalificationWhereInput | boolean
    delete?: PackagingCalificationWhereInput | boolean
    connect?: PackagingCalificationWhereUniqueInput
    update?: XOR<XOR<PackagingCalificationUpdateToOneWithWhereWithoutQualificationInput, PackagingCalificationUpdateWithoutQualificationInput>, PackagingCalificationUncheckedUpdateWithoutQualificationInput>
  }

  export type CommunicationCalificationUpdateOneWithoutQualificationNestedInput = {
    create?: XOR<CommunicationCalificationCreateWithoutQualificationInput, CommunicationCalificationUncheckedCreateWithoutQualificationInput>
    connectOrCreate?: CommunicationCalificationCreateOrConnectWithoutQualificationInput
    upsert?: CommunicationCalificationUpsertWithoutQualificationInput
    disconnect?: CommunicationCalificationWhereInput | boolean
    delete?: CommunicationCalificationWhereInput | boolean
    connect?: CommunicationCalificationWhereUniqueInput
    update?: XOR<XOR<CommunicationCalificationUpdateToOneWithWhereWithoutQualificationInput, CommunicationCalificationUpdateWithoutQualificationInput>, CommunicationCalificationUncheckedUpdateWithoutQualificationInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type QualificationCreateNestedOneWithoutQualityCalificationInput = {
    create?: XOR<QualificationCreateWithoutQualityCalificationInput, QualificationUncheckedCreateWithoutQualityCalificationInput>
    connectOrCreate?: QualificationCreateOrConnectWithoutQualityCalificationInput
    connect?: QualificationWhereUniqueInput
  }

  export type QualificationUncheckedCreateNestedOneWithoutQualityCalificationInput = {
    create?: XOR<QualificationCreateWithoutQualityCalificationInput, QualificationUncheckedCreateWithoutQualityCalificationInput>
    connectOrCreate?: QualificationCreateOrConnectWithoutQualityCalificationInput
    connect?: QualificationWhereUniqueInput
  }

  export type QualificationUpdateOneWithoutQualityCalificationNestedInput = {
    create?: XOR<QualificationCreateWithoutQualityCalificationInput, QualificationUncheckedCreateWithoutQualityCalificationInput>
    connectOrCreate?: QualificationCreateOrConnectWithoutQualityCalificationInput
    upsert?: QualificationUpsertWithoutQualityCalificationInput
    disconnect?: QualificationWhereInput | boolean
    delete?: QualificationWhereInput | boolean
    connect?: QualificationWhereUniqueInput
    update?: XOR<XOR<QualificationUpdateToOneWithWhereWithoutQualityCalificationInput, QualificationUpdateWithoutQualityCalificationInput>, QualificationUncheckedUpdateWithoutQualityCalificationInput>
  }

  export type QualificationUncheckedUpdateOneWithoutQualityCalificationNestedInput = {
    create?: XOR<QualificationCreateWithoutQualityCalificationInput, QualificationUncheckedCreateWithoutQualityCalificationInput>
    connectOrCreate?: QualificationCreateOrConnectWithoutQualityCalificationInput
    upsert?: QualificationUpsertWithoutQualityCalificationInput
    disconnect?: QualificationWhereInput | boolean
    delete?: QualificationWhereInput | boolean
    connect?: QualificationWhereUniqueInput
    update?: XOR<XOR<QualificationUpdateToOneWithWhereWithoutQualityCalificationInput, QualificationUpdateWithoutQualityCalificationInput>, QualificationUncheckedUpdateWithoutQualityCalificationInput>
  }

  export type QualificationCreateNestedOneWithoutTimeCalificationInput = {
    create?: XOR<QualificationCreateWithoutTimeCalificationInput, QualificationUncheckedCreateWithoutTimeCalificationInput>
    connectOrCreate?: QualificationCreateOrConnectWithoutTimeCalificationInput
    connect?: QualificationWhereUniqueInput
  }

  export type QualificationUncheckedCreateNestedOneWithoutTimeCalificationInput = {
    create?: XOR<QualificationCreateWithoutTimeCalificationInput, QualificationUncheckedCreateWithoutTimeCalificationInput>
    connectOrCreate?: QualificationCreateOrConnectWithoutTimeCalificationInput
    connect?: QualificationWhereUniqueInput
  }

  export type QualificationUpdateOneWithoutTimeCalificationNestedInput = {
    create?: XOR<QualificationCreateWithoutTimeCalificationInput, QualificationUncheckedCreateWithoutTimeCalificationInput>
    connectOrCreate?: QualificationCreateOrConnectWithoutTimeCalificationInput
    upsert?: QualificationUpsertWithoutTimeCalificationInput
    disconnect?: QualificationWhereInput | boolean
    delete?: QualificationWhereInput | boolean
    connect?: QualificationWhereUniqueInput
    update?: XOR<XOR<QualificationUpdateToOneWithWhereWithoutTimeCalificationInput, QualificationUpdateWithoutTimeCalificationInput>, QualificationUncheckedUpdateWithoutTimeCalificationInput>
  }

  export type QualificationUncheckedUpdateOneWithoutTimeCalificationNestedInput = {
    create?: XOR<QualificationCreateWithoutTimeCalificationInput, QualificationUncheckedCreateWithoutTimeCalificationInput>
    connectOrCreate?: QualificationCreateOrConnectWithoutTimeCalificationInput
    upsert?: QualificationUpsertWithoutTimeCalificationInput
    disconnect?: QualificationWhereInput | boolean
    delete?: QualificationWhereInput | boolean
    connect?: QualificationWhereUniqueInput
    update?: XOR<XOR<QualificationUpdateToOneWithWhereWithoutTimeCalificationInput, QualificationUpdateWithoutTimeCalificationInput>, QualificationUncheckedUpdateWithoutTimeCalificationInput>
  }

  export type QualificationCreateNestedOneWithoutPackagingCalificationInput = {
    create?: XOR<QualificationCreateWithoutPackagingCalificationInput, QualificationUncheckedCreateWithoutPackagingCalificationInput>
    connectOrCreate?: QualificationCreateOrConnectWithoutPackagingCalificationInput
    connect?: QualificationWhereUniqueInput
  }

  export type QualificationUncheckedCreateNestedOneWithoutPackagingCalificationInput = {
    create?: XOR<QualificationCreateWithoutPackagingCalificationInput, QualificationUncheckedCreateWithoutPackagingCalificationInput>
    connectOrCreate?: QualificationCreateOrConnectWithoutPackagingCalificationInput
    connect?: QualificationWhereUniqueInput
  }

  export type QualificationUpdateOneWithoutPackagingCalificationNestedInput = {
    create?: XOR<QualificationCreateWithoutPackagingCalificationInput, QualificationUncheckedCreateWithoutPackagingCalificationInput>
    connectOrCreate?: QualificationCreateOrConnectWithoutPackagingCalificationInput
    upsert?: QualificationUpsertWithoutPackagingCalificationInput
    disconnect?: QualificationWhereInput | boolean
    delete?: QualificationWhereInput | boolean
    connect?: QualificationWhereUniqueInput
    update?: XOR<XOR<QualificationUpdateToOneWithWhereWithoutPackagingCalificationInput, QualificationUpdateWithoutPackagingCalificationInput>, QualificationUncheckedUpdateWithoutPackagingCalificationInput>
  }

  export type QualificationUncheckedUpdateOneWithoutPackagingCalificationNestedInput = {
    create?: XOR<QualificationCreateWithoutPackagingCalificationInput, QualificationUncheckedCreateWithoutPackagingCalificationInput>
    connectOrCreate?: QualificationCreateOrConnectWithoutPackagingCalificationInput
    upsert?: QualificationUpsertWithoutPackagingCalificationInput
    disconnect?: QualificationWhereInput | boolean
    delete?: QualificationWhereInput | boolean
    connect?: QualificationWhereUniqueInput
    update?: XOR<XOR<QualificationUpdateToOneWithWhereWithoutPackagingCalificationInput, QualificationUpdateWithoutPackagingCalificationInput>, QualificationUncheckedUpdateWithoutPackagingCalificationInput>
  }

  export type QualificationCreateNestedOneWithoutCommunicationCalificationInput = {
    create?: XOR<QualificationCreateWithoutCommunicationCalificationInput, QualificationUncheckedCreateWithoutCommunicationCalificationInput>
    connectOrCreate?: QualificationCreateOrConnectWithoutCommunicationCalificationInput
    connect?: QualificationWhereUniqueInput
  }

  export type QualificationUncheckedCreateNestedOneWithoutCommunicationCalificationInput = {
    create?: XOR<QualificationCreateWithoutCommunicationCalificationInput, QualificationUncheckedCreateWithoutCommunicationCalificationInput>
    connectOrCreate?: QualificationCreateOrConnectWithoutCommunicationCalificationInput
    connect?: QualificationWhereUniqueInput
  }

  export type QualificationUpdateOneWithoutCommunicationCalificationNestedInput = {
    create?: XOR<QualificationCreateWithoutCommunicationCalificationInput, QualificationUncheckedCreateWithoutCommunicationCalificationInput>
    connectOrCreate?: QualificationCreateOrConnectWithoutCommunicationCalificationInput
    upsert?: QualificationUpsertWithoutCommunicationCalificationInput
    disconnect?: QualificationWhereInput | boolean
    delete?: QualificationWhereInput | boolean
    connect?: QualificationWhereUniqueInput
    update?: XOR<XOR<QualificationUpdateToOneWithWhereWithoutCommunicationCalificationInput, QualificationUpdateWithoutCommunicationCalificationInput>, QualificationUncheckedUpdateWithoutCommunicationCalificationInput>
  }

  export type QualificationUncheckedUpdateOneWithoutCommunicationCalificationNestedInput = {
    create?: XOR<QualificationCreateWithoutCommunicationCalificationInput, QualificationUncheckedCreateWithoutCommunicationCalificationInput>
    connectOrCreate?: QualificationCreateOrConnectWithoutCommunicationCalificationInput
    upsert?: QualificationUpsertWithoutCommunicationCalificationInput
    disconnect?: QualificationWhereInput | boolean
    delete?: QualificationWhereInput | boolean
    connect?: QualificationWhereUniqueInput
    update?: XOR<XOR<QualificationUpdateToOneWithWhereWithoutCommunicationCalificationInput, QualificationUpdateWithoutCommunicationCalificationInput>, QualificationUncheckedUpdateWithoutCommunicationCalificationInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type QualityCalificationCreateWithoutQualificationInput = {
    score: number
    comments: string
  }

  export type QualityCalificationUncheckedCreateWithoutQualificationInput = {
    id?: number
    score: number
    comments: string
  }

  export type QualityCalificationCreateOrConnectWithoutQualificationInput = {
    where: QualityCalificationWhereUniqueInput
    create: XOR<QualityCalificationCreateWithoutQualificationInput, QualityCalificationUncheckedCreateWithoutQualificationInput>
  }

  export type TimeCalificationCreateWithoutQualificationInput = {
    score: number
    comments: string
  }

  export type TimeCalificationUncheckedCreateWithoutQualificationInput = {
    id?: number
    score: number
    comments: string
  }

  export type TimeCalificationCreateOrConnectWithoutQualificationInput = {
    where: TimeCalificationWhereUniqueInput
    create: XOR<TimeCalificationCreateWithoutQualificationInput, TimeCalificationUncheckedCreateWithoutQualificationInput>
  }

  export type PackagingCalificationCreateWithoutQualificationInput = {
    score: number
    comments: string
  }

  export type PackagingCalificationUncheckedCreateWithoutQualificationInput = {
    id?: number
    score: number
    comments: string
  }

  export type PackagingCalificationCreateOrConnectWithoutQualificationInput = {
    where: PackagingCalificationWhereUniqueInput
    create: XOR<PackagingCalificationCreateWithoutQualificationInput, PackagingCalificationUncheckedCreateWithoutQualificationInput>
  }

  export type CommunicationCalificationCreateWithoutQualificationInput = {
    score: number
    comments: string
  }

  export type CommunicationCalificationUncheckedCreateWithoutQualificationInput = {
    id?: number
    score: number
    comments: string
  }

  export type CommunicationCalificationCreateOrConnectWithoutQualificationInput = {
    where: CommunicationCalificationWhereUniqueInput
    create: XOR<CommunicationCalificationCreateWithoutQualificationInput, CommunicationCalificationUncheckedCreateWithoutQualificationInput>
  }

  export type QualityCalificationUpsertWithoutQualificationInput = {
    update: XOR<QualityCalificationUpdateWithoutQualificationInput, QualityCalificationUncheckedUpdateWithoutQualificationInput>
    create: XOR<QualityCalificationCreateWithoutQualificationInput, QualityCalificationUncheckedCreateWithoutQualificationInput>
    where?: QualityCalificationWhereInput
  }

  export type QualityCalificationUpdateToOneWithWhereWithoutQualificationInput = {
    where?: QualityCalificationWhereInput
    data: XOR<QualityCalificationUpdateWithoutQualificationInput, QualityCalificationUncheckedUpdateWithoutQualificationInput>
  }

  export type QualityCalificationUpdateWithoutQualificationInput = {
    score?: IntFieldUpdateOperationsInput | number
    comments?: StringFieldUpdateOperationsInput | string
  }

  export type QualityCalificationUncheckedUpdateWithoutQualificationInput = {
    id?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    comments?: StringFieldUpdateOperationsInput | string
  }

  export type TimeCalificationUpsertWithoutQualificationInput = {
    update: XOR<TimeCalificationUpdateWithoutQualificationInput, TimeCalificationUncheckedUpdateWithoutQualificationInput>
    create: XOR<TimeCalificationCreateWithoutQualificationInput, TimeCalificationUncheckedCreateWithoutQualificationInput>
    where?: TimeCalificationWhereInput
  }

  export type TimeCalificationUpdateToOneWithWhereWithoutQualificationInput = {
    where?: TimeCalificationWhereInput
    data: XOR<TimeCalificationUpdateWithoutQualificationInput, TimeCalificationUncheckedUpdateWithoutQualificationInput>
  }

  export type TimeCalificationUpdateWithoutQualificationInput = {
    score?: IntFieldUpdateOperationsInput | number
    comments?: StringFieldUpdateOperationsInput | string
  }

  export type TimeCalificationUncheckedUpdateWithoutQualificationInput = {
    id?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    comments?: StringFieldUpdateOperationsInput | string
  }

  export type PackagingCalificationUpsertWithoutQualificationInput = {
    update: XOR<PackagingCalificationUpdateWithoutQualificationInput, PackagingCalificationUncheckedUpdateWithoutQualificationInput>
    create: XOR<PackagingCalificationCreateWithoutQualificationInput, PackagingCalificationUncheckedCreateWithoutQualificationInput>
    where?: PackagingCalificationWhereInput
  }

  export type PackagingCalificationUpdateToOneWithWhereWithoutQualificationInput = {
    where?: PackagingCalificationWhereInput
    data: XOR<PackagingCalificationUpdateWithoutQualificationInput, PackagingCalificationUncheckedUpdateWithoutQualificationInput>
  }

  export type PackagingCalificationUpdateWithoutQualificationInput = {
    score?: IntFieldUpdateOperationsInput | number
    comments?: StringFieldUpdateOperationsInput | string
  }

  export type PackagingCalificationUncheckedUpdateWithoutQualificationInput = {
    id?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    comments?: StringFieldUpdateOperationsInput | string
  }

  export type CommunicationCalificationUpsertWithoutQualificationInput = {
    update: XOR<CommunicationCalificationUpdateWithoutQualificationInput, CommunicationCalificationUncheckedUpdateWithoutQualificationInput>
    create: XOR<CommunicationCalificationCreateWithoutQualificationInput, CommunicationCalificationUncheckedCreateWithoutQualificationInput>
    where?: CommunicationCalificationWhereInput
  }

  export type CommunicationCalificationUpdateToOneWithWhereWithoutQualificationInput = {
    where?: CommunicationCalificationWhereInput
    data: XOR<CommunicationCalificationUpdateWithoutQualificationInput, CommunicationCalificationUncheckedUpdateWithoutQualificationInput>
  }

  export type CommunicationCalificationUpdateWithoutQualificationInput = {
    score?: IntFieldUpdateOperationsInput | number
    comments?: StringFieldUpdateOperationsInput | string
  }

  export type CommunicationCalificationUncheckedUpdateWithoutQualificationInput = {
    id?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    comments?: StringFieldUpdateOperationsInput | string
  }

  export type QualificationCreateWithoutQualityCalificationInput = {
    donationId: string
    donatorId: string
    organizationId: string
    generalScore: number
    notes: string
    createdAt?: Date | string
    updatedAt?: Date | string
    timeCalification?: TimeCalificationCreateNestedOneWithoutQualificationInput
    packagingCalification?: PackagingCalificationCreateNestedOneWithoutQualificationInput
    communicationCalification?: CommunicationCalificationCreateNestedOneWithoutQualificationInput
  }

  export type QualificationUncheckedCreateWithoutQualityCalificationInput = {
    id?: number
    donationId: string
    donatorId: string
    organizationId: string
    timeCalificationId: number
    packagingCalificationId: number
    communicationCalificationId: number
    generalScore: number
    notes: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QualificationCreateOrConnectWithoutQualityCalificationInput = {
    where: QualificationWhereUniqueInput
    create: XOR<QualificationCreateWithoutQualityCalificationInput, QualificationUncheckedCreateWithoutQualityCalificationInput>
  }

  export type QualificationUpsertWithoutQualityCalificationInput = {
    update: XOR<QualificationUpdateWithoutQualityCalificationInput, QualificationUncheckedUpdateWithoutQualityCalificationInput>
    create: XOR<QualificationCreateWithoutQualityCalificationInput, QualificationUncheckedCreateWithoutQualityCalificationInput>
    where?: QualificationWhereInput
  }

  export type QualificationUpdateToOneWithWhereWithoutQualityCalificationInput = {
    where?: QualificationWhereInput
    data: XOR<QualificationUpdateWithoutQualityCalificationInput, QualificationUncheckedUpdateWithoutQualityCalificationInput>
  }

  export type QualificationUpdateWithoutQualityCalificationInput = {
    donationId?: StringFieldUpdateOperationsInput | string
    donatorId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    generalScore?: FloatFieldUpdateOperationsInput | number
    notes?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    timeCalification?: TimeCalificationUpdateOneWithoutQualificationNestedInput
    packagingCalification?: PackagingCalificationUpdateOneWithoutQualificationNestedInput
    communicationCalification?: CommunicationCalificationUpdateOneWithoutQualificationNestedInput
  }

  export type QualificationUncheckedUpdateWithoutQualityCalificationInput = {
    id?: IntFieldUpdateOperationsInput | number
    donationId?: StringFieldUpdateOperationsInput | string
    donatorId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    timeCalificationId?: IntFieldUpdateOperationsInput | number
    packagingCalificationId?: IntFieldUpdateOperationsInput | number
    communicationCalificationId?: IntFieldUpdateOperationsInput | number
    generalScore?: FloatFieldUpdateOperationsInput | number
    notes?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QualificationCreateWithoutTimeCalificationInput = {
    donationId: string
    donatorId: string
    organizationId: string
    generalScore: number
    notes: string
    createdAt?: Date | string
    updatedAt?: Date | string
    qualityCalification?: QualityCalificationCreateNestedOneWithoutQualificationInput
    packagingCalification?: PackagingCalificationCreateNestedOneWithoutQualificationInput
    communicationCalification?: CommunicationCalificationCreateNestedOneWithoutQualificationInput
  }

  export type QualificationUncheckedCreateWithoutTimeCalificationInput = {
    id?: number
    donationId: string
    donatorId: string
    organizationId: string
    qualityCalificationId: number
    packagingCalificationId: number
    communicationCalificationId: number
    generalScore: number
    notes: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QualificationCreateOrConnectWithoutTimeCalificationInput = {
    where: QualificationWhereUniqueInput
    create: XOR<QualificationCreateWithoutTimeCalificationInput, QualificationUncheckedCreateWithoutTimeCalificationInput>
  }

  export type QualificationUpsertWithoutTimeCalificationInput = {
    update: XOR<QualificationUpdateWithoutTimeCalificationInput, QualificationUncheckedUpdateWithoutTimeCalificationInput>
    create: XOR<QualificationCreateWithoutTimeCalificationInput, QualificationUncheckedCreateWithoutTimeCalificationInput>
    where?: QualificationWhereInput
  }

  export type QualificationUpdateToOneWithWhereWithoutTimeCalificationInput = {
    where?: QualificationWhereInput
    data: XOR<QualificationUpdateWithoutTimeCalificationInput, QualificationUncheckedUpdateWithoutTimeCalificationInput>
  }

  export type QualificationUpdateWithoutTimeCalificationInput = {
    donationId?: StringFieldUpdateOperationsInput | string
    donatorId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    generalScore?: FloatFieldUpdateOperationsInput | number
    notes?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qualityCalification?: QualityCalificationUpdateOneWithoutQualificationNestedInput
    packagingCalification?: PackagingCalificationUpdateOneWithoutQualificationNestedInput
    communicationCalification?: CommunicationCalificationUpdateOneWithoutQualificationNestedInput
  }

  export type QualificationUncheckedUpdateWithoutTimeCalificationInput = {
    id?: IntFieldUpdateOperationsInput | number
    donationId?: StringFieldUpdateOperationsInput | string
    donatorId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    qualityCalificationId?: IntFieldUpdateOperationsInput | number
    packagingCalificationId?: IntFieldUpdateOperationsInput | number
    communicationCalificationId?: IntFieldUpdateOperationsInput | number
    generalScore?: FloatFieldUpdateOperationsInput | number
    notes?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QualificationCreateWithoutPackagingCalificationInput = {
    donationId: string
    donatorId: string
    organizationId: string
    generalScore: number
    notes: string
    createdAt?: Date | string
    updatedAt?: Date | string
    qualityCalification?: QualityCalificationCreateNestedOneWithoutQualificationInput
    timeCalification?: TimeCalificationCreateNestedOneWithoutQualificationInput
    communicationCalification?: CommunicationCalificationCreateNestedOneWithoutQualificationInput
  }

  export type QualificationUncheckedCreateWithoutPackagingCalificationInput = {
    id?: number
    donationId: string
    donatorId: string
    organizationId: string
    qualityCalificationId: number
    timeCalificationId: number
    communicationCalificationId: number
    generalScore: number
    notes: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QualificationCreateOrConnectWithoutPackagingCalificationInput = {
    where: QualificationWhereUniqueInput
    create: XOR<QualificationCreateWithoutPackagingCalificationInput, QualificationUncheckedCreateWithoutPackagingCalificationInput>
  }

  export type QualificationUpsertWithoutPackagingCalificationInput = {
    update: XOR<QualificationUpdateWithoutPackagingCalificationInput, QualificationUncheckedUpdateWithoutPackagingCalificationInput>
    create: XOR<QualificationCreateWithoutPackagingCalificationInput, QualificationUncheckedCreateWithoutPackagingCalificationInput>
    where?: QualificationWhereInput
  }

  export type QualificationUpdateToOneWithWhereWithoutPackagingCalificationInput = {
    where?: QualificationWhereInput
    data: XOR<QualificationUpdateWithoutPackagingCalificationInput, QualificationUncheckedUpdateWithoutPackagingCalificationInput>
  }

  export type QualificationUpdateWithoutPackagingCalificationInput = {
    donationId?: StringFieldUpdateOperationsInput | string
    donatorId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    generalScore?: FloatFieldUpdateOperationsInput | number
    notes?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qualityCalification?: QualityCalificationUpdateOneWithoutQualificationNestedInput
    timeCalification?: TimeCalificationUpdateOneWithoutQualificationNestedInput
    communicationCalification?: CommunicationCalificationUpdateOneWithoutQualificationNestedInput
  }

  export type QualificationUncheckedUpdateWithoutPackagingCalificationInput = {
    id?: IntFieldUpdateOperationsInput | number
    donationId?: StringFieldUpdateOperationsInput | string
    donatorId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    qualityCalificationId?: IntFieldUpdateOperationsInput | number
    timeCalificationId?: IntFieldUpdateOperationsInput | number
    communicationCalificationId?: IntFieldUpdateOperationsInput | number
    generalScore?: FloatFieldUpdateOperationsInput | number
    notes?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QualificationCreateWithoutCommunicationCalificationInput = {
    donationId: string
    donatorId: string
    organizationId: string
    generalScore: number
    notes: string
    createdAt?: Date | string
    updatedAt?: Date | string
    qualityCalification?: QualityCalificationCreateNestedOneWithoutQualificationInput
    timeCalification?: TimeCalificationCreateNestedOneWithoutQualificationInput
    packagingCalification?: PackagingCalificationCreateNestedOneWithoutQualificationInput
  }

  export type QualificationUncheckedCreateWithoutCommunicationCalificationInput = {
    id?: number
    donationId: string
    donatorId: string
    organizationId: string
    qualityCalificationId: number
    timeCalificationId: number
    packagingCalificationId: number
    generalScore: number
    notes: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QualificationCreateOrConnectWithoutCommunicationCalificationInput = {
    where: QualificationWhereUniqueInput
    create: XOR<QualificationCreateWithoutCommunicationCalificationInput, QualificationUncheckedCreateWithoutCommunicationCalificationInput>
  }

  export type QualificationUpsertWithoutCommunicationCalificationInput = {
    update: XOR<QualificationUpdateWithoutCommunicationCalificationInput, QualificationUncheckedUpdateWithoutCommunicationCalificationInput>
    create: XOR<QualificationCreateWithoutCommunicationCalificationInput, QualificationUncheckedCreateWithoutCommunicationCalificationInput>
    where?: QualificationWhereInput
  }

  export type QualificationUpdateToOneWithWhereWithoutCommunicationCalificationInput = {
    where?: QualificationWhereInput
    data: XOR<QualificationUpdateWithoutCommunicationCalificationInput, QualificationUncheckedUpdateWithoutCommunicationCalificationInput>
  }

  export type QualificationUpdateWithoutCommunicationCalificationInput = {
    donationId?: StringFieldUpdateOperationsInput | string
    donatorId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    generalScore?: FloatFieldUpdateOperationsInput | number
    notes?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qualityCalification?: QualityCalificationUpdateOneWithoutQualificationNestedInput
    timeCalification?: TimeCalificationUpdateOneWithoutQualificationNestedInput
    packagingCalification?: PackagingCalificationUpdateOneWithoutQualificationNestedInput
  }

  export type QualificationUncheckedUpdateWithoutCommunicationCalificationInput = {
    id?: IntFieldUpdateOperationsInput | number
    donationId?: StringFieldUpdateOperationsInput | string
    donatorId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    qualityCalificationId?: IntFieldUpdateOperationsInput | number
    timeCalificationId?: IntFieldUpdateOperationsInput | number
    packagingCalificationId?: IntFieldUpdateOperationsInput | number
    generalScore?: FloatFieldUpdateOperationsInput | number
    notes?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use QualificationDefaultArgs instead
     */
    export type QualificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = QualificationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use QualityCalificationDefaultArgs instead
     */
    export type QualityCalificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = QualityCalificationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TimeCalificationDefaultArgs instead
     */
    export type TimeCalificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TimeCalificationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PackagingCalificationDefaultArgs instead
     */
    export type PackagingCalificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PackagingCalificationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommunicationCalificationDefaultArgs instead
     */
    export type CommunicationCalificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommunicationCalificationDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}